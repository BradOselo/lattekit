module io.lattekit.dsl.GenerateLatteCSS

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "LatteCSS"
var projectPath = "../${projectName}"

var fileExtensions = "css"
var grammarURI = "platform:/resource/${projectName}/src/main/resources/io/lattekit/dsl/LatteCSS.xtext"

var encoding = "UTF-8"
var lineDelimiter = "\n"
var fileHeader = "/*\n * generated by Xtext \${version}\n */"

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		projectMapping = { projectName = 'LatteCSS' path = '${projectPath}/../LatteCSS' }
		projectMapping = { projectName = 'LatteCSS.ide' path = '${projectPath}/../LatteCSS.ide' }
		projectMapping = { projectName = 'LatteCSS.idea' path = '${projectPath}/../LatteCSS.idea' }
		// The following two lines can be removed, if Xbase is not used.
		registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
	}
	
	component = DirectoryCleaner {
		directory = "${projectPath}/src/main/xtext-gen"
	}
	component = DirectoryCleaner {
		directory = "${projectPath}.ide/src/main/xtext-gen"
	}
	component = DirectoryCleaner {
		directory = "${projectPath}.idea/src/main/xtext-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${projectPath}/model/generated"
	}
	
	component = XtextGenerator auto-inject {
		configuration = {
			project = WizardConfig {
				runtimeRoot = projectPath
				eclipseEditor = false
				ideaEditor = true
				genericIdeSupport = true
				mavenLayout = true
			}
			code = auto-inject {
				preferXtendStubs = true
			}
		}
		language = auto-inject {
			uri = grammarURI

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 auto-inject {}
			
	
			// generates Java API for the generated EPackages
			fragment = adapter.FragmentAdapter { 
				fragment = ecore.EMFGeneratorFragment auto-inject {
					javaModelDirectory = "/${projectName}/src/main/xtext-gen"
					updateBuildProperties = false
				}
			}

			fragment = adapter.FragmentAdapter {
				fragment = serializer.SerializerFragment auto-inject {
					generateStub = false
				}
			}

			// a custom ResourceFactory for use with EMF
			fragment = adapter.FragmentAdapter {
				fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
			}

			// The antlr parser generator fragment.
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {}
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 auto-inject {
			//	composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 auto-inject {}
			fragment = exporting.QualifiedNamesFragment2 auto-inject {}

			// generator API
			fragment = generator.GeneratorFragment2 {}

			// formatter API
			fragment = formatting.Formatter2Fragment2 {}
			
			
			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
			}
			// provides the necessary bindings for java types integration
			fragment = types.TypesGeneratorFragment2 auto-inject {}

			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment2 auto-inject {}

			// generates the required bindings only if the grammar inherits from Xtype
			fragment = xbase.XtypeGeneratorFragment2 auto-inject {}

			// Intellij IDEA integration
			fragment = idea.IdeaPluginGenerator auto-inject {}
			fragment = idea.parser.antlr.XtextAntlrIDEAGeneratorFragment auto-inject {}
			
		}
	}
}
