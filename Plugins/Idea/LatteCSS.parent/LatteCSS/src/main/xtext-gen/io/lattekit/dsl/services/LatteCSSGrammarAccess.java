/*
 * generated by Xtext 2.9.0.beta5
 */
package io.lattekit.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractParserRuleElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LatteCSSGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CSSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.CSS");
		private final Assignment cDefinitionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_0 = (RuleCall)cDefinitionsAssignment.eContents().get(0);
		
		//CSS:
		//	definitions+=Definition+;
		@Override public ParserRule getRule() { return rule; }
		
		//definitions+=Definition+
		public Assignment getDefinitionsAssignment() { return cDefinitionsAssignment; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_0() { return cDefinitionsDefinitionParserRuleCall_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectorSelectorParserRuleCall_0_0 = (RuleCall)cSelectorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_1_0 = (RuleCall)cSelectorAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesCSSPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Definition:
		//	selector+=Selector (',' selector+=Selector)*
		//	'{'
		//	properties+=CSSProperty+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//selector+=Selector (',' selector+=Selector)* '{' properties+=CSSProperty+ '}'
		public Group getGroup() { return cGroup; }
		
		//selector+=Selector
		public Assignment getSelectorAssignment_0() { return cSelectorAssignment_0; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_0_0() { return cSelectorSelectorParserRuleCall_0_0; }
		
		//(',' selector+=Selector)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//selector+=Selector
		public Assignment getSelectorAssignment_1_1() { return cSelectorAssignment_1_1; }
		
		//Selector
		public RuleCall getSelectorSelectorParserRuleCall_1_1_0() { return cSelectorSelectorParserRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//properties+=CSSProperty+
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//CSSProperty
		public RuleCall getPropertiesCSSPropertyParserRuleCall_3_0() { return cPropertiesCSSPropertyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.Selector");
		private final Assignment cSimpleSelectorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSimpleSelectorSimpleSelectorParserRuleCall_0 = (RuleCall)cSimpleSelectorAssignment.eContents().get(0);
		
		//Selector:
		//	simpleSelector+=SimpleSelector+;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleSelector+=SimpleSelector+
		public Assignment getSimpleSelectorAssignment() { return cSimpleSelectorAssignment; }
		
		//SimpleSelector
		public RuleCall getSimpleSelectorSimpleSelectorParserRuleCall_0() { return cSimpleSelectorSimpleSelectorParserRuleCall_0; }
	}
	public class SimpleSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.SimpleSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElementIDTerminalRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdIdSelectorParserRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Assignment cPseudoClassAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPseudoClassPseudoClassSelectorParserRuleCall_1_1_0 = (RuleCall)cPseudoClassAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cClassAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cClassClassSelectorParserRuleCall_2_0_0 = (RuleCall)cClassAssignment_2_0.eContents().get(0);
		private final Assignment cPseudoClassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPseudoClassPseudoClassSelectorParserRuleCall_2_1_0 = (RuleCall)cPseudoClassAssignment_2_1.eContents().get(0);
		
		//SimpleSelector:
		//	element=ID | id=IdSelector pseudoClass=PseudoClassSelector? | class=ClassSelector pseudoClass=PseudoClassSelector?;
		@Override public ParserRule getRule() { return rule; }
		
		//element=ID | id=IdSelector pseudoClass=PseudoClassSelector? | class=ClassSelector pseudoClass=PseudoClassSelector?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//element=ID
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_0_0() { return cElementIDTerminalRuleCall_0_0; }
		
		//id=IdSelector pseudoClass=PseudoClassSelector?
		public Group getGroup_1() { return cGroup_1; }
		
		//id=IdSelector
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//IdSelector
		public RuleCall getIdIdSelectorParserRuleCall_1_0_0() { return cIdIdSelectorParserRuleCall_1_0_0; }
		
		//pseudoClass=PseudoClassSelector?
		public Assignment getPseudoClassAssignment_1_1() { return cPseudoClassAssignment_1_1; }
		
		//PseudoClassSelector
		public RuleCall getPseudoClassPseudoClassSelectorParserRuleCall_1_1_0() { return cPseudoClassPseudoClassSelectorParserRuleCall_1_1_0; }
		
		//class=ClassSelector pseudoClass=PseudoClassSelector?
		public Group getGroup_2() { return cGroup_2; }
		
		//class=ClassSelector
		public Assignment getClassAssignment_2_0() { return cClassAssignment_2_0; }
		
		//ClassSelector
		public RuleCall getClassClassSelectorParserRuleCall_2_0_0() { return cClassClassSelectorParserRuleCall_2_0_0; }
		
		//pseudoClass=PseudoClassSelector?
		public Assignment getPseudoClassAssignment_2_1() { return cPseudoClassAssignment_2_1; }
		
		//PseudoClassSelector
		public RuleCall getPseudoClassPseudoClassSelectorParserRuleCall_2_1_0() { return cPseudoClassPseudoClassSelectorParserRuleCall_2_1_0; }
	}
	public class IdSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.IdSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//IdSelector:
		//	'#' id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' id=ID
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
	}
	public class ClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.ClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassIDTerminalRuleCall_1_0 = (RuleCall)cClassAssignment_1.eContents().get(0);
		
		//ClassSelector:
		//	'.' class=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' class=ID
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//class=ID
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }
		
		//ID
		public RuleCall getClassIDTerminalRuleCall_1_0() { return cClassIDTerminalRuleCall_1_0; }
	}
	public class PseudoClassSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.PseudoClassSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PseudoClassSelector:
		//	':' value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//':' value=ID
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
	}
	public class CSSPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.CSSProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cTransitionPropertyParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFontFamilyPropertyParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cFontStylePropertyParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cSizePropertyParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cShorthandSizePropertyParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cShorthandColorPropertyParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cBorderRadiusPropertyParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cViewSizePropertyParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cPaintPropertyParserRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cColorPropertyParserRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cDrawablePropertyParserRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cBackgroundRepeatPropertyParserRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cBackgroundFilterTypePropertyParserRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cBackgroundGravityPropertyParserRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cBackgroundFilterPropertyParserRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final RuleCall cBorderPropertyParserRuleCall_0_15 = (RuleCall)cAlternatives_0.eContents().get(15);
		private final RuleCall cAlignmentPropertyParserRuleCall_0_16 = (RuleCall)cAlternatives_0.eContents().get(16);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CSSProperty:
		//	(TransitionProperty | FontFamilyProperty | FontStyleProperty | SizeProperty | ShorthandSizeProperty |
		//	ShorthandColorProperty | BorderRadiusProperty | ViewSizeProperty | PaintProperty | ColorProperty | DrawableProperty |
		//	BackgroundRepeatProperty | BackgroundFilterTypeProperty | BackgroundGravityProperty | BackgroundFilterProperty |
		//	BorderProperty | AlignmentProperty) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(TransitionProperty | FontFamilyProperty | FontStyleProperty | SizeProperty | ShorthandSizeProperty |
		//ShorthandColorProperty | BorderRadiusProperty | ViewSizeProperty | PaintProperty | ColorProperty | DrawableProperty |
		//BackgroundRepeatProperty | BackgroundFilterTypeProperty | BackgroundGravityProperty | BackgroundFilterProperty |
		//BorderProperty | AlignmentProperty) ';'
		public Group getGroup() { return cGroup; }
		
		//(TransitionProperty | FontFamilyProperty | FontStyleProperty | SizeProperty | ShorthandSizeProperty |
		//ShorthandColorProperty | BorderRadiusProperty | ViewSizeProperty | PaintProperty | ColorProperty | DrawableProperty |
		//BackgroundRepeatProperty | BackgroundFilterTypeProperty | BackgroundGravityProperty | BackgroundFilterProperty |
		//BorderProperty | AlignmentProperty)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//TransitionProperty
		public RuleCall getTransitionPropertyParserRuleCall_0_0() { return cTransitionPropertyParserRuleCall_0_0; }
		
		//FontFamilyProperty
		public RuleCall getFontFamilyPropertyParserRuleCall_0_1() { return cFontFamilyPropertyParserRuleCall_0_1; }
		
		//FontStyleProperty
		public RuleCall getFontStylePropertyParserRuleCall_0_2() { return cFontStylePropertyParserRuleCall_0_2; }
		
		//SizeProperty
		public RuleCall getSizePropertyParserRuleCall_0_3() { return cSizePropertyParserRuleCall_0_3; }
		
		//ShorthandSizeProperty
		public RuleCall getShorthandSizePropertyParserRuleCall_0_4() { return cShorthandSizePropertyParserRuleCall_0_4; }
		
		//ShorthandColorProperty
		public RuleCall getShorthandColorPropertyParserRuleCall_0_5() { return cShorthandColorPropertyParserRuleCall_0_5; }
		
		//BorderRadiusProperty
		public RuleCall getBorderRadiusPropertyParserRuleCall_0_6() { return cBorderRadiusPropertyParserRuleCall_0_6; }
		
		//ViewSizeProperty
		public RuleCall getViewSizePropertyParserRuleCall_0_7() { return cViewSizePropertyParserRuleCall_0_7; }
		
		//PaintProperty
		public RuleCall getPaintPropertyParserRuleCall_0_8() { return cPaintPropertyParserRuleCall_0_8; }
		
		//ColorProperty
		public RuleCall getColorPropertyParserRuleCall_0_9() { return cColorPropertyParserRuleCall_0_9; }
		
		//DrawableProperty
		public RuleCall getDrawablePropertyParserRuleCall_0_10() { return cDrawablePropertyParserRuleCall_0_10; }
		
		//BackgroundRepeatProperty
		public RuleCall getBackgroundRepeatPropertyParserRuleCall_0_11() { return cBackgroundRepeatPropertyParserRuleCall_0_11; }
		
		//BackgroundFilterTypeProperty
		public RuleCall getBackgroundFilterTypePropertyParserRuleCall_0_12() { return cBackgroundFilterTypePropertyParserRuleCall_0_12; }
		
		//BackgroundGravityProperty
		public RuleCall getBackgroundGravityPropertyParserRuleCall_0_13() { return cBackgroundGravityPropertyParserRuleCall_0_13; }
		
		//BackgroundFilterProperty
		public RuleCall getBackgroundFilterPropertyParserRuleCall_0_14() { return cBackgroundFilterPropertyParserRuleCall_0_14; }
		
		//BorderProperty
		public RuleCall getBorderPropertyParserRuleCall_0_15() { return cBorderPropertyParserRuleCall_0_15; }
		
		//AlignmentProperty
		public RuleCall getAlignmentPropertyParserRuleCall_0_16() { return cAlignmentPropertyParserRuleCall_0_16; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class FontFamilyPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.FontFamilyProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyFontFamilyKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//FontFamilyProperty:
		//	property='font-family'
		//	':' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//property='font-family' ':' value=STRING
		public Group getGroup() { return cGroup; }
		
		//property='font-family'
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//'font-family'
		public Keyword getPropertyFontFamilyKeyword_0_0() { return cPropertyFontFamilyKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class FontStylePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.FontStyleProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyFontStyleKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueNormalKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueBoldKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		private final Keyword cValueBoldItalicKeyword_2_0_2 = (Keyword)cValueAlternatives_2_0.eContents().get(2);
		
		//FontStyleProperty:
		//	property='font-style'
		//	':' value=('normal' | 'bold' | 'bold-italic');
		@Override public ParserRule getRule() { return rule; }
		
		//property='font-style' ':' value=('normal' | 'bold' | 'bold-italic')
		public Group getGroup() { return cGroup; }
		
		//property='font-style'
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//'font-style'
		public Keyword getPropertyFontStyleKeyword_0_0() { return cPropertyFontStyleKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=('normal' | 'bold' | 'bold-italic')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('normal' | 'bold' | 'bold-italic')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'normal'
		public Keyword getValueNormalKeyword_2_0_0() { return cValueNormalKeyword_2_0_0; }
		
		//'bold'
		public Keyword getValueBoldKeyword_2_0_1() { return cValueBoldKeyword_2_0_1; }
		
		//'bold-italic'
		public Keyword getValueBoldItalicKeyword_2_0_2() { return cValueBoldItalicKeyword_2_0_2; }
	}
	public class ViewSizePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.ViewSizeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPropertyAlternatives_0_0 = (Alternatives)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cPropertyWidthKeyword_0_0_0 = (Keyword)cPropertyAlternatives_0_0.eContents().get(0);
		private final Keyword cPropertyHeightKeyword_0_0_1 = (Keyword)cPropertyAlternatives_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueViewSizeValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ViewSizeProperty:
		//	property=('width' | 'height') ':' value=ViewSizeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//property=('width' | 'height') ':' value=ViewSizeValue
		public Group getGroup() { return cGroup; }
		
		//property=('width' | 'height')
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//('width' | 'height')
		public Alternatives getPropertyAlternatives_0_0() { return cPropertyAlternatives_0_0; }
		
		//'width'
		public Keyword getPropertyWidthKeyword_0_0_0() { return cPropertyWidthKeyword_0_0_0; }
		
		//'height'
		public Keyword getPropertyHeightKeyword_0_0_1() { return cPropertyHeightKeyword_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ViewSizeValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ViewSizeValue
		public RuleCall getValueViewSizeValueParserRuleCall_2_0() { return cValueViewSizeValueParserRuleCall_2_0; }
	}
	public class ShorthandSizePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.ShorthandSizeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPropertyAlternatives_0_0 = (Alternatives)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cPropertyBorderWidthKeyword_0_0_0 = (Keyword)cPropertyAlternatives_0_0.eContents().get(0);
		private final Keyword cPropertyBorderRadiusKeyword_0_0_1 = (Keyword)cPropertyAlternatives_0_0.eContents().get(1);
		private final Keyword cPropertyMarginKeyword_0_0_2 = (Keyword)cPropertyAlternatives_0_0.eContents().get(2);
		private final Keyword cPropertyPaddingKeyword_0_0_3 = (Keyword)cPropertyAlternatives_0_0.eContents().get(3);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesSizeValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		
		//ShorthandSizeProperty:
		//	property=('border-width' | 'border-radius' | 'margin' | 'padding') ':' values+=SizeValue+;
		@Override public ParserRule getRule() { return rule; }
		
		//property=('border-width' | 'border-radius' | 'margin' | 'padding') ':' values+=SizeValue+
		public Group getGroup() { return cGroup; }
		
		//property=('border-width' | 'border-radius' | 'margin' | 'padding')
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//('border-width' | 'border-radius' | 'margin' | 'padding')
		public Alternatives getPropertyAlternatives_0_0() { return cPropertyAlternatives_0_0; }
		
		//'border-width'
		public Keyword getPropertyBorderWidthKeyword_0_0_0() { return cPropertyBorderWidthKeyword_0_0_0; }
		
		//'border-radius'
		public Keyword getPropertyBorderRadiusKeyword_0_0_1() { return cPropertyBorderRadiusKeyword_0_0_1; }
		
		//'margin'
		public Keyword getPropertyMarginKeyword_0_0_2() { return cPropertyMarginKeyword_0_0_2; }
		
		//'padding'
		public Keyword getPropertyPaddingKeyword_0_0_3() { return cPropertyPaddingKeyword_0_0_3; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//values+=SizeValue+
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//SizeValue
		public RuleCall getValuesSizeValueParserRuleCall_2_0() { return cValuesSizeValueParserRuleCall_2_0; }
	}
	public class BorderRadiusPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.BorderRadiusProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPropertyAlternatives_0_0 = (Alternatives)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cPropertyBorderTopLeftRadiusKeyword_0_0_0 = (Keyword)cPropertyAlternatives_0_0.eContents().get(0);
		private final Keyword cPropertyBorderTopRightRadiusKeyword_0_0_1 = (Keyword)cPropertyAlternatives_0_0.eContents().get(1);
		private final Keyword cPropertyBorderBottomLeftRadiusKeyword_0_0_2 = (Keyword)cPropertyAlternatives_0_0.eContents().get(2);
		private final Keyword cPropertyBorderBottomRightRadiusKeyword_0_0_3 = (Keyword)cPropertyAlternatives_0_0.eContents().get(3);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesSizeValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		
		//BorderRadiusProperty:
		//	property=('border-top-left-radius' | 'border-top-right-radius' | 'border-bottom-left-radius' |
		//	'border-bottom-right-radius') ':' values+=SizeValue+;
		@Override public ParserRule getRule() { return rule; }
		
		//property=('border-top-left-radius' | 'border-top-right-radius' | 'border-bottom-left-radius' |
		//'border-bottom-right-radius') ':' values+=SizeValue+
		public Group getGroup() { return cGroup; }
		
		//property=('border-top-left-radius' | 'border-top-right-radius' | 'border-bottom-left-radius' |
		//'border-bottom-right-radius')
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//('border-top-left-radius' | 'border-top-right-radius' | 'border-bottom-left-radius' | 'border-bottom-right-radius')
		public Alternatives getPropertyAlternatives_0_0() { return cPropertyAlternatives_0_0; }
		
		//'border-top-left-radius'
		public Keyword getPropertyBorderTopLeftRadiusKeyword_0_0_0() { return cPropertyBorderTopLeftRadiusKeyword_0_0_0; }
		
		//'border-top-right-radius'
		public Keyword getPropertyBorderTopRightRadiusKeyword_0_0_1() { return cPropertyBorderTopRightRadiusKeyword_0_0_1; }
		
		//'border-bottom-left-radius'
		public Keyword getPropertyBorderBottomLeftRadiusKeyword_0_0_2() { return cPropertyBorderBottomLeftRadiusKeyword_0_0_2; }
		
		//'border-bottom-right-radius'
		public Keyword getPropertyBorderBottomRightRadiusKeyword_0_0_3() { return cPropertyBorderBottomRightRadiusKeyword_0_0_3; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//values+=SizeValue+
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//SizeValue
		public RuleCall getValuesSizeValueParserRuleCall_2_0() { return cValuesSizeValueParserRuleCall_2_0; }
	}
	public class SizePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.SizeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPropertyAlternatives_0_0 = (Alternatives)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cPropertyBorderLeftWidthKeyword_0_0_0 = (Keyword)cPropertyAlternatives_0_0.eContents().get(0);
		private final Keyword cPropertyBorderRightWidthKeyword_0_0_1 = (Keyword)cPropertyAlternatives_0_0.eContents().get(1);
		private final Keyword cPropertyBorderTopWidthKeyword_0_0_2 = (Keyword)cPropertyAlternatives_0_0.eContents().get(2);
		private final Keyword cPropertyBorderBottomWidthKeyword_0_0_3 = (Keyword)cPropertyAlternatives_0_0.eContents().get(3);
		private final Keyword cPropertyFontSizeKeyword_0_0_4 = (Keyword)cPropertyAlternatives_0_0.eContents().get(4);
		private final Keyword cPropertyTranslateXKeyword_0_0_5 = (Keyword)cPropertyAlternatives_0_0.eContents().get(5);
		private final Keyword cPropertyTranslateYKeyword_0_0_6 = (Keyword)cPropertyAlternatives_0_0.eContents().get(6);
		private final Keyword cPropertyMarginLeftKeyword_0_0_7 = (Keyword)cPropertyAlternatives_0_0.eContents().get(7);
		private final Keyword cPropertyMarginRightKeyword_0_0_8 = (Keyword)cPropertyAlternatives_0_0.eContents().get(8);
		private final Keyword cPropertyMarginTopKeyword_0_0_9 = (Keyword)cPropertyAlternatives_0_0.eContents().get(9);
		private final Keyword cPropertyMarginBottomKeyword_0_0_10 = (Keyword)cPropertyAlternatives_0_0.eContents().get(10);
		private final Keyword cPropertyPaddingLeftKeyword_0_0_11 = (Keyword)cPropertyAlternatives_0_0.eContents().get(11);
		private final Keyword cPropertyPaddingRightKeyword_0_0_12 = (Keyword)cPropertyAlternatives_0_0.eContents().get(12);
		private final Keyword cPropertyPaddingTopKeyword_0_0_13 = (Keyword)cPropertyAlternatives_0_0.eContents().get(13);
		private final Keyword cPropertyPaddingBottomKeyword_0_0_14 = (Keyword)cPropertyAlternatives_0_0.eContents().get(14);
		private final Keyword cPropertyXKeyword_0_0_15 = (Keyword)cPropertyAlternatives_0_0.eContents().get(15);
		private final Keyword cPropertyYKeyword_0_0_16 = (Keyword)cPropertyAlternatives_0_0.eContents().get(16);
		private final Keyword cPropertyElevationKeyword_0_0_17 = (Keyword)cPropertyAlternatives_0_0.eContents().get(17);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSizeValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SizeProperty:
		//	property=('border-left-width' | 'border-right-width' | 'border-top-width' | 'border-bottom-width'
		//	| 'font-size'
		//	| 'translate-x' | 'translate-y'
		//	| 'margin-left' | 'margin-right' | 'margin-top' | 'margin-bottom'
		//	| 'padding-left' | 'padding-right' | 'padding-top' | 'padding-bottom'
		//	| 'x' | 'y'
		//	| 'elevation') ':' value=SizeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//property=('border-left-width' | 'border-right-width' | 'border-top-width' | 'border-bottom-width' | 'font-size' |
		//'translate-x' | 'translate-y' | 'margin-left' | 'margin-right' | 'margin-top' | 'margin-bottom' | 'padding-left' |
		//'padding-right' | 'padding-top' | 'padding-bottom' | 'x' | 'y' | 'elevation') ':' value=SizeValue
		public Group getGroup() { return cGroup; }
		
		//property=('border-left-width' | 'border-right-width' | 'border-top-width' | 'border-bottom-width' | 'font-size' |
		//'translate-x' | 'translate-y' | 'margin-left' | 'margin-right' | 'margin-top' | 'margin-bottom' | 'padding-left' |
		//'padding-right' | 'padding-top' | 'padding-bottom' | 'x' | 'y' | 'elevation')
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//('border-left-width' | 'border-right-width' | 'border-top-width' | 'border-bottom-width' | 'font-size' | 'translate-x' |
		//'translate-y' | 'margin-left' | 'margin-right' | 'margin-top' | 'margin-bottom' | 'padding-left' | 'padding-right' |
		//'padding-top' | 'padding-bottom' | 'x' | 'y' | 'elevation')
		public Alternatives getPropertyAlternatives_0_0() { return cPropertyAlternatives_0_0; }
		
		//'border-left-width'
		public Keyword getPropertyBorderLeftWidthKeyword_0_0_0() { return cPropertyBorderLeftWidthKeyword_0_0_0; }
		
		//'border-right-width'
		public Keyword getPropertyBorderRightWidthKeyword_0_0_1() { return cPropertyBorderRightWidthKeyword_0_0_1; }
		
		//'border-top-width'
		public Keyword getPropertyBorderTopWidthKeyword_0_0_2() { return cPropertyBorderTopWidthKeyword_0_0_2; }
		
		//'border-bottom-width'
		public Keyword getPropertyBorderBottomWidthKeyword_0_0_3() { return cPropertyBorderBottomWidthKeyword_0_0_3; }
		
		//'font-size'
		public Keyword getPropertyFontSizeKeyword_0_0_4() { return cPropertyFontSizeKeyword_0_0_4; }
		
		//'translate-x'
		public Keyword getPropertyTranslateXKeyword_0_0_5() { return cPropertyTranslateXKeyword_0_0_5; }
		
		//'translate-y'
		public Keyword getPropertyTranslateYKeyword_0_0_6() { return cPropertyTranslateYKeyword_0_0_6; }
		
		//'margin-left'
		public Keyword getPropertyMarginLeftKeyword_0_0_7() { return cPropertyMarginLeftKeyword_0_0_7; }
		
		//'margin-right'
		public Keyword getPropertyMarginRightKeyword_0_0_8() { return cPropertyMarginRightKeyword_0_0_8; }
		
		//'margin-top'
		public Keyword getPropertyMarginTopKeyword_0_0_9() { return cPropertyMarginTopKeyword_0_0_9; }
		
		//'margin-bottom'
		public Keyword getPropertyMarginBottomKeyword_0_0_10() { return cPropertyMarginBottomKeyword_0_0_10; }
		
		//'padding-left'
		public Keyword getPropertyPaddingLeftKeyword_0_0_11() { return cPropertyPaddingLeftKeyword_0_0_11; }
		
		//'padding-right'
		public Keyword getPropertyPaddingRightKeyword_0_0_12() { return cPropertyPaddingRightKeyword_0_0_12; }
		
		//'padding-top'
		public Keyword getPropertyPaddingTopKeyword_0_0_13() { return cPropertyPaddingTopKeyword_0_0_13; }
		
		//'padding-bottom'
		public Keyword getPropertyPaddingBottomKeyword_0_0_14() { return cPropertyPaddingBottomKeyword_0_0_14; }
		
		//'x'
		public Keyword getPropertyXKeyword_0_0_15() { return cPropertyXKeyword_0_0_15; }
		
		//'y'
		public Keyword getPropertyYKeyword_0_0_16() { return cPropertyYKeyword_0_0_16; }
		
		//'elevation'
		public Keyword getPropertyElevationKeyword_0_0_17() { return cPropertyElevationKeyword_0_0_17; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=SizeValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//SizeValue
		public RuleCall getValueSizeValueParserRuleCall_2_0() { return cValueSizeValueParserRuleCall_2_0; }
	}
	public class PaintPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.PaintProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyBackgroundKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePaintValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PaintProperty:
		//	property='background'
		//	':' value=PaintValue;
		@Override public ParserRule getRule() { return rule; }
		
		//property='background' ':' value=PaintValue
		public Group getGroup() { return cGroup; }
		
		//property='background'
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//'background'
		public Keyword getPropertyBackgroundKeyword_0_0() { return cPropertyBackgroundKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=PaintValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//PaintValue
		public RuleCall getValuePaintValueParserRuleCall_2_0() { return cValuePaintValueParserRuleCall_2_0; }
	}
	public class TransitionPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.TransitionProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyTransitionKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTransitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTransitionsTransitionValueParserRuleCall_2_0 = (RuleCall)cTransitionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTransitionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTransitionsTransitionValueParserRuleCall_3_1_0 = (RuleCall)cTransitionsAssignment_3_1.eContents().get(0);
		
		//TransitionProperty:
		//	property='transition' ':' transitions+=TransitionValue (',' transitions+=TransitionValue)*;
		@Override public ParserRule getRule() { return rule; }
		
		//property='transition' ':' transitions+=TransitionValue (',' transitions+=TransitionValue)*
		public Group getGroup() { return cGroup; }
		
		//property='transition'
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//'transition'
		public Keyword getPropertyTransitionKeyword_0_0() { return cPropertyTransitionKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//transitions+=TransitionValue
		public Assignment getTransitionsAssignment_2() { return cTransitionsAssignment_2; }
		
		//TransitionValue
		public RuleCall getTransitionsTransitionValueParserRuleCall_2_0() { return cTransitionsTransitionValueParserRuleCall_2_0; }
		
		//(',' transitions+=TransitionValue)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//transitions+=TransitionValue
		public Assignment getTransitionsAssignment_3_1() { return cTransitionsAssignment_3_1; }
		
		//TransitionValue
		public RuleCall getTransitionsTransitionValueParserRuleCall_3_1_0() { return cTransitionsTransitionValueParserRuleCall_3_1_0; }
	}
	public class TransitionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.TransitionValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyNamePropertyNameValueParserRuleCall_0_0 = (RuleCall)cPropertyNameAssignment_0.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationTimeValueParserRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		private final Assignment cTimingFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimingFunctionTimingFunctionParserRuleCall_2_0 = (RuleCall)cTimingFunctionAssignment_2.eContents().get(0);
		private final Assignment cDelayAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDelayTimeValueParserRuleCall_3_0 = (RuleCall)cDelayAssignment_3.eContents().get(0);
		
		//TransitionValue:
		//	propertyName=PropertyNameValue duration=TimeValue timingFunction=TimingFunction? delay=TimeValue?;
		@Override public ParserRule getRule() { return rule; }
		
		//propertyName=PropertyNameValue duration=TimeValue timingFunction=TimingFunction? delay=TimeValue?
		public Group getGroup() { return cGroup; }
		
		//propertyName=PropertyNameValue
		public Assignment getPropertyNameAssignment_0() { return cPropertyNameAssignment_0; }
		
		//PropertyNameValue
		public RuleCall getPropertyNamePropertyNameValueParserRuleCall_0_0() { return cPropertyNamePropertyNameValueParserRuleCall_0_0; }
		
		//duration=TimeValue
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//TimeValue
		public RuleCall getDurationTimeValueParserRuleCall_1_0() { return cDurationTimeValueParserRuleCall_1_0; }
		
		//timingFunction=TimingFunction?
		public Assignment getTimingFunctionAssignment_2() { return cTimingFunctionAssignment_2; }
		
		//TimingFunction
		public RuleCall getTimingFunctionTimingFunctionParserRuleCall_2_0() { return cTimingFunctionTimingFunctionParserRuleCall_2_0; }
		
		//delay=TimeValue?
		public Assignment getDelayAssignment_3() { return cDelayAssignment_3; }
		
		//TimeValue
		public RuleCall getDelayTimeValueParserRuleCall_3_0() { return cDelayTimeValueParserRuleCall_3_0; }
	}
	public class DrawablePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.DrawableProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyBackgroundDrawableKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DrawableProperty:
		//	property='background-drawable' ':' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//property='background-drawable' ':' value=STRING
		public Group getGroup() { return cGroup; }
		
		//property='background-drawable'
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//'background-drawable'
		public Keyword getPropertyBackgroundDrawableKeyword_0_0() { return cPropertyBackgroundDrawableKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class BackgroundRepeatPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.BackgroundRepeatProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyBackgroundRepeatKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesRepeatValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesRepeatValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		
		//BackgroundRepeatProperty:
		//	property='background-repeat' ':' values+=RepeatValue values+=RepeatValue?;
		@Override public ParserRule getRule() { return rule; }
		
		//property='background-repeat' ':' values+=RepeatValue values+=RepeatValue?
		public Group getGroup() { return cGroup; }
		
		//property='background-repeat'
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//'background-repeat'
		public Keyword getPropertyBackgroundRepeatKeyword_0_0() { return cPropertyBackgroundRepeatKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//values+=RepeatValue
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//RepeatValue
		public RuleCall getValuesRepeatValueParserRuleCall_2_0() { return cValuesRepeatValueParserRuleCall_2_0; }
		
		//values+=RepeatValue?
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//RepeatValue
		public RuleCall getValuesRepeatValueParserRuleCall_3_0() { return cValuesRepeatValueParserRuleCall_3_0; }
	}
	public class BorderPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.BorderProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPropertyAlternatives_0_0 = (Alternatives)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cPropertyBorderKeyword_0_0_0 = (Keyword)cPropertyAlternatives_0_0.eContents().get(0);
		private final Keyword cPropertyBorderTopKeyword_0_0_1 = (Keyword)cPropertyAlternatives_0_0.eContents().get(1);
		private final Keyword cPropertyBorderBottomKeyword_0_0_2 = (Keyword)cPropertyAlternatives_0_0.eContents().get(2);
		private final Keyword cPropertyBorderLeftKeyword_0_0_3 = (Keyword)cPropertyAlternatives_0_0.eContents().get(3);
		private final Keyword cPropertyBorderRightKeyword_0_0_4 = (Keyword)cPropertyAlternatives_0_0.eContents().get(4);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWidthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWidthSizeValueParserRuleCall_2_0 = (RuleCall)cWidthAssignment_2.eContents().get(0);
		private final Assignment cStyleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cStyleAlternatives_3_0 = (Alternatives)cStyleAssignment_3.eContents().get(0);
		private final Keyword cStyleSolidKeyword_3_0_0 = (Keyword)cStyleAlternatives_3_0.eContents().get(0);
		private final Keyword cStyleDashedKeyword_3_0_1 = (Keyword)cStyleAlternatives_3_0.eContents().get(1);
		private final Keyword cStyleDottedKeyword_3_0_2 = (Keyword)cStyleAlternatives_3_0.eContents().get(2);
		private final Assignment cColorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColorColorValueParserRuleCall_4_0 = (RuleCall)cColorAssignment_4.eContents().get(0);
		
		//BorderProperty:
		//	property=('border' | 'border-top' | 'border-bottom' | 'border-left' | 'border-right') ':' width=SizeValue?
		//	style=('solid' | 'dashed' | 'dotted') color=ColorValue?;
		@Override public ParserRule getRule() { return rule; }
		
		//property=('border' | 'border-top' | 'border-bottom' | 'border-left' | 'border-right') ':' width=SizeValue?
		//style=('solid' | 'dashed' | 'dotted') color=ColorValue?
		public Group getGroup() { return cGroup; }
		
		//property=('border' | 'border-top' | 'border-bottom' | 'border-left' | 'border-right')
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//('border' | 'border-top' | 'border-bottom' | 'border-left' | 'border-right')
		public Alternatives getPropertyAlternatives_0_0() { return cPropertyAlternatives_0_0; }
		
		//'border'
		public Keyword getPropertyBorderKeyword_0_0_0() { return cPropertyBorderKeyword_0_0_0; }
		
		//'border-top'
		public Keyword getPropertyBorderTopKeyword_0_0_1() { return cPropertyBorderTopKeyword_0_0_1; }
		
		//'border-bottom'
		public Keyword getPropertyBorderBottomKeyword_0_0_2() { return cPropertyBorderBottomKeyword_0_0_2; }
		
		//'border-left'
		public Keyword getPropertyBorderLeftKeyword_0_0_3() { return cPropertyBorderLeftKeyword_0_0_3; }
		
		//'border-right'
		public Keyword getPropertyBorderRightKeyword_0_0_4() { return cPropertyBorderRightKeyword_0_0_4; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//width=SizeValue?
		public Assignment getWidthAssignment_2() { return cWidthAssignment_2; }
		
		//SizeValue
		public RuleCall getWidthSizeValueParserRuleCall_2_0() { return cWidthSizeValueParserRuleCall_2_0; }
		
		//style=('solid' | 'dashed' | 'dotted')
		public Assignment getStyleAssignment_3() { return cStyleAssignment_3; }
		
		//('solid' | 'dashed' | 'dotted')
		public Alternatives getStyleAlternatives_3_0() { return cStyleAlternatives_3_0; }
		
		//'solid'
		public Keyword getStyleSolidKeyword_3_0_0() { return cStyleSolidKeyword_3_0_0; }
		
		//'dashed'
		public Keyword getStyleDashedKeyword_3_0_1() { return cStyleDashedKeyword_3_0_1; }
		
		//'dotted'
		public Keyword getStyleDottedKeyword_3_0_2() { return cStyleDottedKeyword_3_0_2; }
		
		//color=ColorValue?
		public Assignment getColorAssignment_4() { return cColorAssignment_4; }
		
		//ColorValue
		public RuleCall getColorColorValueParserRuleCall_4_0() { return cColorColorValueParserRuleCall_4_0; }
	}
	public class BackgroundFilterPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.BackgroundFilterProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyBackgroundFilterKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorColorValueParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		private final Assignment cFilterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFilterFilterValueParserRuleCall_3_0 = (RuleCall)cFilterAssignment_3.eContents().get(0);
		
		//BackgroundFilterProperty:
		//	property='background-filter' ':' color=ColorValue filter=FilterValue?;
		@Override public ParserRule getRule() { return rule; }
		
		//property='background-filter' ':' color=ColorValue filter=FilterValue?
		public Group getGroup() { return cGroup; }
		
		//property='background-filter'
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//'background-filter'
		public Keyword getPropertyBackgroundFilterKeyword_0_0() { return cPropertyBackgroundFilterKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//color=ColorValue
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }
		
		//ColorValue
		public RuleCall getColorColorValueParserRuleCall_2_0() { return cColorColorValueParserRuleCall_2_0; }
		
		//filter=FilterValue?
		public Assignment getFilterAssignment_3() { return cFilterAssignment_3; }
		
		//FilterValue
		public RuleCall getFilterFilterValueParserRuleCall_3_0() { return cFilterFilterValueParserRuleCall_3_0; }
	}
	public class RepeatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.RepeatValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRepeatXKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMirrorXKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cClampXKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNoRepeatXKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRepeatYKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMirrorYKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cClampYKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNoRepeatYKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//RepeatValue:
		//	'repeat-x' | 'mirror-x' | 'clamp-x' | 'no-repeat-x' | 'repeat-y' | 'mirror-y' | 'clamp-y' | 'no-repeat-y';
		@Override public ParserRule getRule() { return rule; }
		
		//'repeat-x' | 'mirror-x' | 'clamp-x' | 'no-repeat-x' | 'repeat-y' | 'mirror-y' | 'clamp-y' | 'no-repeat-y'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'repeat-x'
		public Keyword getRepeatXKeyword_0() { return cRepeatXKeyword_0; }
		
		//'mirror-x'
		public Keyword getMirrorXKeyword_1() { return cMirrorXKeyword_1; }
		
		//'clamp-x'
		public Keyword getClampXKeyword_2() { return cClampXKeyword_2; }
		
		//'no-repeat-x'
		public Keyword getNoRepeatXKeyword_3() { return cNoRepeatXKeyword_3; }
		
		//'repeat-y'
		public Keyword getRepeatYKeyword_4() { return cRepeatYKeyword_4; }
		
		//'mirror-y'
		public Keyword getMirrorYKeyword_5() { return cMirrorYKeyword_5; }
		
		//'clamp-y'
		public Keyword getClampYKeyword_6() { return cClampYKeyword_6; }
		
		//'no-repeat-y'
		public Keyword getNoRepeatYKeyword_7() { return cNoRepeatYKeyword_7; }
	}
	public class GravityValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.GravityValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBottomKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeftKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRightKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCenter_verticalKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFill_verticalKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCenter_horizontalKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cFill_horizontalKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCenterKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cFillKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cClip_verticalKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cClip_horizontalKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cStartKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cEndKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//GravityValue:
		//	'top' | 'bottom' | 'left' | 'right' | 'center_vertical' | 'fill_vertical' | 'center_horizontal' |
		//	'fill_horizontal' | 'center' | 'fill' | 'clip_vertical' | 'clip_horizontal' | 'start' | 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'top' | 'bottom' | 'left' | 'right' | 'center_vertical' | 'fill_vertical' | 'center_horizontal' | 'fill_horizontal' |
		//'center' | 'fill' | 'clip_vertical' | 'clip_horizontal' | 'start' | 'end'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'top'
		public Keyword getTopKeyword_0() { return cTopKeyword_0; }
		
		//'bottom'
		public Keyword getBottomKeyword_1() { return cBottomKeyword_1; }
		
		//'left'
		public Keyword getLeftKeyword_2() { return cLeftKeyword_2; }
		
		//'right'
		public Keyword getRightKeyword_3() { return cRightKeyword_3; }
		
		//'center_vertical'
		public Keyword getCenter_verticalKeyword_4() { return cCenter_verticalKeyword_4; }
		
		//'fill_vertical'
		public Keyword getFill_verticalKeyword_5() { return cFill_verticalKeyword_5; }
		
		//'center_horizontal'
		public Keyword getCenter_horizontalKeyword_6() { return cCenter_horizontalKeyword_6; }
		
		//'fill_horizontal'
		public Keyword getFill_horizontalKeyword_7() { return cFill_horizontalKeyword_7; }
		
		//'center'
		public Keyword getCenterKeyword_8() { return cCenterKeyword_8; }
		
		//'fill'
		public Keyword getFillKeyword_9() { return cFillKeyword_9; }
		
		//'clip_vertical'
		public Keyword getClip_verticalKeyword_10() { return cClip_verticalKeyword_10; }
		
		//'clip_horizontal'
		public Keyword getClip_horizontalKeyword_11() { return cClip_horizontalKeyword_11; }
		
		//'start'
		public Keyword getStartKeyword_12() { return cStartKeyword_12; }
		
		//'end'
		public Keyword getEndKeyword_13() { return cEndKeyword_13; }
	}
	public class BackgroundGravityPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.BackgroundGravityProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyBackgroundGravityKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesGravityValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesGravityValueParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		
		//BackgroundGravityProperty:
		//	property='background-gravity' ':' values+=GravityValue (',' values+=GravityValue)*;
		@Override public ParserRule getRule() { return rule; }
		
		//property='background-gravity' ':' values+=GravityValue (',' values+=GravityValue)*
		public Group getGroup() { return cGroup; }
		
		//property='background-gravity'
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//'background-gravity'
		public Keyword getPropertyBackgroundGravityKeyword_0_0() { return cPropertyBackgroundGravityKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//values+=GravityValue
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//GravityValue
		public RuleCall getValuesGravityValueParserRuleCall_2_0() { return cValuesGravityValueParserRuleCall_2_0; }
		
		//(',' values+=GravityValue)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//values+=GravityValue
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }
		
		//GravityValue
		public RuleCall getValuesGravityValueParserRuleCall_3_1_0() { return cValuesGravityValueParserRuleCall_3_1_0; }
	}
	public class FilterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.FilterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cClearKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDarkenKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDstKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDst_atopKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDst_inKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDst_outKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDst_overKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLightenKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMultiplyKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cOverlayKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cScreenKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cSrcKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cSrc_atopKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cSrc_inKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cSrc_outKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cSrc_overKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cXorKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		
		//FilterValue:
		//	'add' | 'clear' | 'darken' | 'dst' | 'dst_atop' | 'dst_in' | 'dst_out' |
		//	'dst_over' | 'lighten' | 'multiply' | 'overlay' | 'screen' | 'src' | 'src_atop' | 'src_in' | 'src_out'
		//	| 'src_over' | 'xor';
		@Override public ParserRule getRule() { return rule; }
		
		//'add' | 'clear' | 'darken' | 'dst' | 'dst_atop' | 'dst_in' | 'dst_out' | 'dst_over' | 'lighten' | 'multiply' | 'overlay'
		//| 'screen' | 'src' | 'src_atop' | 'src_in' | 'src_out' | 'src_over' | 'xor'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'clear'
		public Keyword getClearKeyword_1() { return cClearKeyword_1; }
		
		//'darken'
		public Keyword getDarkenKeyword_2() { return cDarkenKeyword_2; }
		
		//'dst'
		public Keyword getDstKeyword_3() { return cDstKeyword_3; }
		
		//'dst_atop'
		public Keyword getDst_atopKeyword_4() { return cDst_atopKeyword_4; }
		
		//'dst_in'
		public Keyword getDst_inKeyword_5() { return cDst_inKeyword_5; }
		
		//'dst_out'
		public Keyword getDst_outKeyword_6() { return cDst_outKeyword_6; }
		
		//'dst_over'
		public Keyword getDst_overKeyword_7() { return cDst_overKeyword_7; }
		
		//'lighten'
		public Keyword getLightenKeyword_8() { return cLightenKeyword_8; }
		
		//'multiply'
		public Keyword getMultiplyKeyword_9() { return cMultiplyKeyword_9; }
		
		//'overlay'
		public Keyword getOverlayKeyword_10() { return cOverlayKeyword_10; }
		
		//'screen'
		public Keyword getScreenKeyword_11() { return cScreenKeyword_11; }
		
		//'src'
		public Keyword getSrcKeyword_12() { return cSrcKeyword_12; }
		
		//'src_atop'
		public Keyword getSrc_atopKeyword_13() { return cSrc_atopKeyword_13; }
		
		//'src_in'
		public Keyword getSrc_inKeyword_14() { return cSrc_inKeyword_14; }
		
		//'src_out'
		public Keyword getSrc_outKeyword_15() { return cSrc_outKeyword_15; }
		
		//'src_over'
		public Keyword getSrc_overKeyword_16() { return cSrc_overKeyword_16; }
		
		//'xor'
		public Keyword getXorKeyword_17() { return cXorKeyword_17; }
	}
	public class BackgroundFilterTypePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.BackgroundFilterTypeProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyBackgroundFilterTypeKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueFilterValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//BackgroundFilterTypeProperty:
		//	property='background-filter-type' ':' value=FilterValue;
		@Override public ParserRule getRule() { return rule; }
		
		//property='background-filter-type' ':' value=FilterValue
		public Group getGroup() { return cGroup; }
		
		//property='background-filter-type'
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//'background-filter-type'
		public Keyword getPropertyBackgroundFilterTypeKeyword_0_0() { return cPropertyBackgroundFilterTypeKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=FilterValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//FilterValue
		public RuleCall getValueFilterValueParserRuleCall_2_0() { return cValueFilterValueParserRuleCall_2_0; }
	}
	public class ShorthandColorPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.ShorthandColorProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyBorderColorKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesColorValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		
		//ShorthandColorProperty:
		//	property='border-color' ':' values+=ColorValue+;
		@Override public ParserRule getRule() { return rule; }
		
		//property='border-color' ':' values+=ColorValue+
		public Group getGroup() { return cGroup; }
		
		//property='border-color'
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//'border-color'
		public Keyword getPropertyBorderColorKeyword_0_0() { return cPropertyBorderColorKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//values+=ColorValue+
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//ColorValue
		public RuleCall getValuesColorValueParserRuleCall_2_0() { return cValuesColorValueParserRuleCall_2_0; }
	}
	public class ColorPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.ColorProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPropertyAlternatives_0_0 = (Alternatives)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cPropertyBorderTopColorKeyword_0_0_0 = (Keyword)cPropertyAlternatives_0_0.eContents().get(0);
		private final Keyword cPropertyBorderLeftColorKeyword_0_0_1 = (Keyword)cPropertyAlternatives_0_0.eContents().get(1);
		private final Keyword cPropertyBorderRightColorKeyword_0_0_2 = (Keyword)cPropertyAlternatives_0_0.eContents().get(2);
		private final Keyword cPropertyBorderBottomColorKeyword_0_0_3 = (Keyword)cPropertyAlternatives_0_0.eContents().get(3);
		private final Keyword cPropertyRippleColorKeyword_0_0_4 = (Keyword)cPropertyAlternatives_0_0.eContents().get(4);
		private final Keyword cPropertyBackgroundColorKeyword_0_0_5 = (Keyword)cPropertyAlternatives_0_0.eContents().get(5);
		private final Keyword cPropertyTextColorKeyword_0_0_6 = (Keyword)cPropertyAlternatives_0_0.eContents().get(6);
		private final Keyword cPropertyBackgroundFilterColorKeyword_0_0_7 = (Keyword)cPropertyAlternatives_0_0.eContents().get(7);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueColorValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ColorProperty:
		//	property=('border-top-color' | 'border-left-color' | 'border-right-color' | 'border-bottom-color' |
		//	'ripple-color' | 'background-color' | 'text-color' | 'background-filter-color') ':' value=ColorValue;
		@Override public ParserRule getRule() { return rule; }
		
		//property=('border-top-color' | 'border-left-color' | 'border-right-color' | 'border-bottom-color' | 'ripple-color' |
		//'background-color' | 'text-color' | 'background-filter-color') ':' value=ColorValue
		public Group getGroup() { return cGroup; }
		
		//property=('border-top-color' | 'border-left-color' | 'border-right-color' | 'border-bottom-color' | 'ripple-color' |
		//'background-color' | 'text-color' | 'background-filter-color')
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//('border-top-color' | 'border-left-color' | 'border-right-color' | 'border-bottom-color' | 'ripple-color' |
		//'background-color' | 'text-color' | 'background-filter-color')
		public Alternatives getPropertyAlternatives_0_0() { return cPropertyAlternatives_0_0; }
		
		//'border-top-color'
		public Keyword getPropertyBorderTopColorKeyword_0_0_0() { return cPropertyBorderTopColorKeyword_0_0_0; }
		
		//'border-left-color'
		public Keyword getPropertyBorderLeftColorKeyword_0_0_1() { return cPropertyBorderLeftColorKeyword_0_0_1; }
		
		//'border-right-color'
		public Keyword getPropertyBorderRightColorKeyword_0_0_2() { return cPropertyBorderRightColorKeyword_0_0_2; }
		
		//'border-bottom-color'
		public Keyword getPropertyBorderBottomColorKeyword_0_0_3() { return cPropertyBorderBottomColorKeyword_0_0_3; }
		
		//'ripple-color'
		public Keyword getPropertyRippleColorKeyword_0_0_4() { return cPropertyRippleColorKeyword_0_0_4; }
		
		//'background-color'
		public Keyword getPropertyBackgroundColorKeyword_0_0_5() { return cPropertyBackgroundColorKeyword_0_0_5; }
		
		//'text-color'
		public Keyword getPropertyTextColorKeyword_0_0_6() { return cPropertyTextColorKeyword_0_0_6; }
		
		//'background-filter-color'
		public Keyword getPropertyBackgroundFilterColorKeyword_0_0_7() { return cPropertyBackgroundFilterColorKeyword_0_0_7; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ColorValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ColorValue
		public RuleCall getValueColorValueParserRuleCall_2_0() { return cValueColorValueParserRuleCall_2_0; }
	}
	public class AlignmentPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.AlignmentProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropertyTextAlignKeyword_0_0 = (Keyword)cPropertyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final Keyword cValueLeftKeyword_2_0_0 = (Keyword)cValueAlternatives_2_0.eContents().get(0);
		private final Keyword cValueCenterKeyword_2_0_1 = (Keyword)cValueAlternatives_2_0.eContents().get(1);
		private final Keyword cValueRightKeyword_2_0_2 = (Keyword)cValueAlternatives_2_0.eContents().get(2);
		private final Keyword cValueJustifyKeyword_2_0_3 = (Keyword)cValueAlternatives_2_0.eContents().get(3);
		
		//AlignmentProperty:
		//	property='text-align'
		//	':' value=('left' | 'center' | 'right' | 'justify');
		@Override public ParserRule getRule() { return rule; }
		
		//property='text-align' ':' value=('left' | 'center' | 'right' | 'justify')
		public Group getGroup() { return cGroup; }
		
		//property='text-align'
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//'text-align'
		public Keyword getPropertyTextAlignKeyword_0_0() { return cPropertyTextAlignKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=('left' | 'center' | 'right' | 'justify')
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//('left' | 'center' | 'right' | 'justify')
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//'left'
		public Keyword getValueLeftKeyword_2_0_0() { return cValueLeftKeyword_2_0_0; }
		
		//'center'
		public Keyword getValueCenterKeyword_2_0_1() { return cValueCenterKeyword_2_0_1; }
		
		//'right'
		public Keyword getValueRightKeyword_2_0_2() { return cValueRightKeyword_2_0_2; }
		
		//'justify'
		public Keyword getValueJustifyKeyword_2_0_3() { return cValueJustifyKeyword_2_0_3; }
	}
	public class TimingFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.TimingFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAccelerateDecelerateKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAccelerateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAnticipateKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAnticipateOvershootKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBounceKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCycleKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDecelerateKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cFastOutKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cFastOutSlowKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLinearKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cLinearOutKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOvershootKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//TimingFunction:
		//	'accelerate-decelerate' | 'accelerate' | 'anticipate' | 'anticipate-overshoot' | 'bounce' |
		//	'cycle' | 'decelerate' | 'fast-out' | 'fast-out-slow' | 'linear' | 'linear-out' | 'overshoot';
		@Override public ParserRule getRule() { return rule; }
		
		//'accelerate-decelerate' | 'accelerate' | 'anticipate' | 'anticipate-overshoot' | 'bounce' | 'cycle' | 'decelerate' |
		//'fast-out' | 'fast-out-slow' | 'linear' | 'linear-out' | 'overshoot'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'accelerate-decelerate'
		public Keyword getAccelerateDecelerateKeyword_0() { return cAccelerateDecelerateKeyword_0; }
		
		//'accelerate'
		public Keyword getAccelerateKeyword_1() { return cAccelerateKeyword_1; }
		
		//'anticipate'
		public Keyword getAnticipateKeyword_2() { return cAnticipateKeyword_2; }
		
		//'anticipate-overshoot'
		public Keyword getAnticipateOvershootKeyword_3() { return cAnticipateOvershootKeyword_3; }
		
		//'bounce'
		public Keyword getBounceKeyword_4() { return cBounceKeyword_4; }
		
		//'cycle'
		public Keyword getCycleKeyword_5() { return cCycleKeyword_5; }
		
		//'decelerate'
		public Keyword getDecelerateKeyword_6() { return cDecelerateKeyword_6; }
		
		//'fast-out'
		public Keyword getFastOutKeyword_7() { return cFastOutKeyword_7; }
		
		//'fast-out-slow'
		public Keyword getFastOutSlowKeyword_8() { return cFastOutSlowKeyword_8; }
		
		//'linear'
		public Keyword getLinearKeyword_9() { return cLinearKeyword_9; }
		
		//'linear-out'
		public Keyword getLinearOutKeyword_10() { return cLinearOutKeyword_10; }
		
		//'overshoot'
		public Keyword getOvershootKeyword_11() { return cOvershootKeyword_11; }
	}
	public class PropertyNameValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.PropertyNameValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMarginKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMarginTopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMarginBottomKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMarginLeftKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMarginRightKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPaddingKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPaddingTopKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPaddingBottomKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cPaddingLeftKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPaddingRightKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cWidthKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cHeightKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cTranslateXKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cTranslateYKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cXKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cYKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cElevationKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cFontSizeKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cBorderRadiusKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cBorderTopLeftRadiusKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cBorderTopRightRadiusKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cBorderBottomLeftRadiusKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cBorderBottomRightRadiusKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cBorderWidthKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cBorderLeftWidthKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cBorderRightWidthKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cBorderTopWidthKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cBorderBottomWidthKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cBorderKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		
		////
		//// ---------------
		//// Values
		//// ---------------
		//PropertyNameValue:
		//	'margin' | 'margin-top' | 'margin-bottom' | 'margin-left' | 'margin-right' |
		//	'padding' | 'padding-top' | 'padding-bottom' | 'padding-left' | 'padding-right' |
		//	'width' | 'height' | 'translateX' | 'translateY' | 'x' | 'y' | 'elevation' | 'font-size' |
		//	'border-radius' | 'border-top-left-radius' | 'border-top-right-radius' | 'border-bottom-left-radius' |
		//	'border-bottom-right-radius' |
		//	'border-width' | 'border-left-width' | 'border-right-width' | 'border-top-width' | 'border-bottom-width' |
		//	'border';
		@Override public ParserRule getRule() { return rule; }
		
		//'margin' | 'margin-top' | 'margin-bottom' | 'margin-left' | 'margin-right' | 'padding' | 'padding-top' |
		//'padding-bottom' | 'padding-left' | 'padding-right' | 'width' | 'height' | 'translateX' | 'translateY' | 'x' | 'y' |
		//'elevation' | 'font-size' | 'border-radius' | 'border-top-left-radius' | 'border-top-right-radius' |
		//'border-bottom-left-radius' | 'border-bottom-right-radius' | 'border-width' | 'border-left-width' |
		//'border-right-width' | 'border-top-width' | 'border-bottom-width' | 'border'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'margin'
		public Keyword getMarginKeyword_0() { return cMarginKeyword_0; }
		
		//'margin-top'
		public Keyword getMarginTopKeyword_1() { return cMarginTopKeyword_1; }
		
		//'margin-bottom'
		public Keyword getMarginBottomKeyword_2() { return cMarginBottomKeyword_2; }
		
		//'margin-left'
		public Keyword getMarginLeftKeyword_3() { return cMarginLeftKeyword_3; }
		
		//'margin-right'
		public Keyword getMarginRightKeyword_4() { return cMarginRightKeyword_4; }
		
		//'padding'
		public Keyword getPaddingKeyword_5() { return cPaddingKeyword_5; }
		
		//'padding-top'
		public Keyword getPaddingTopKeyword_6() { return cPaddingTopKeyword_6; }
		
		//'padding-bottom'
		public Keyword getPaddingBottomKeyword_7() { return cPaddingBottomKeyword_7; }
		
		//'padding-left'
		public Keyword getPaddingLeftKeyword_8() { return cPaddingLeftKeyword_8; }
		
		//'padding-right'
		public Keyword getPaddingRightKeyword_9() { return cPaddingRightKeyword_9; }
		
		//'width'
		public Keyword getWidthKeyword_10() { return cWidthKeyword_10; }
		
		//'height'
		public Keyword getHeightKeyword_11() { return cHeightKeyword_11; }
		
		//'translateX'
		public Keyword getTranslateXKeyword_12() { return cTranslateXKeyword_12; }
		
		//'translateY'
		public Keyword getTranslateYKeyword_13() { return cTranslateYKeyword_13; }
		
		//'x'
		public Keyword getXKeyword_14() { return cXKeyword_14; }
		
		//'y'
		public Keyword getYKeyword_15() { return cYKeyword_15; }
		
		//'elevation'
		public Keyword getElevationKeyword_16() { return cElevationKeyword_16; }
		
		//'font-size'
		public Keyword getFontSizeKeyword_17() { return cFontSizeKeyword_17; }
		
		//'border-radius'
		public Keyword getBorderRadiusKeyword_18() { return cBorderRadiusKeyword_18; }
		
		//'border-top-left-radius'
		public Keyword getBorderTopLeftRadiusKeyword_19() { return cBorderTopLeftRadiusKeyword_19; }
		
		//'border-top-right-radius'
		public Keyword getBorderTopRightRadiusKeyword_20() { return cBorderTopRightRadiusKeyword_20; }
		
		//'border-bottom-left-radius'
		public Keyword getBorderBottomLeftRadiusKeyword_21() { return cBorderBottomLeftRadiusKeyword_21; }
		
		//'border-bottom-right-radius'
		public Keyword getBorderBottomRightRadiusKeyword_22() { return cBorderBottomRightRadiusKeyword_22; }
		
		//'border-width'
		public Keyword getBorderWidthKeyword_23() { return cBorderWidthKeyword_23; }
		
		//'border-left-width'
		public Keyword getBorderLeftWidthKeyword_24() { return cBorderLeftWidthKeyword_24; }
		
		//'border-right-width'
		public Keyword getBorderRightWidthKeyword_25() { return cBorderRightWidthKeyword_25; }
		
		//'border-top-width'
		public Keyword getBorderTopWidthKeyword_26() { return cBorderTopWidthKeyword_26; }
		
		//'border-bottom-width'
		public Keyword getBorderBottomWidthKeyword_27() { return cBorderBottomWidthKeyword_27; }
		
		//'border'
		public Keyword getBorderKeyword_28() { return cBorderKeyword_28; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.NumberValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberValue:
		//	IntegerValue | RealValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerValue | RealValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_0() { return cIntegerValueParserRuleCall_0; }
		
		//RealValue
		public RuleCall getRealValueParserRuleCall_1() { return cRealValueParserRuleCall_1; }
	}
	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.IntegerValue");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntegerValue:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.RealValue");
		private final RuleCall cREALTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RealValue:
		//	REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//REAL
		public RuleCall getREALTerminalRuleCall() { return cREALTerminalRuleCall; }
	}
	public class TimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.TimeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTimeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTimeNumberValueParserRuleCall_0_0 = (RuleCall)cTimeAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cUnitAlternatives_1_0 = (Alternatives)cUnitAssignment_1.eContents().get(0);
		private final Keyword cUnitSKeyword_1_0_0 = (Keyword)cUnitAlternatives_1_0.eContents().get(0);
		private final Keyword cUnitMsKeyword_1_0_1 = (Keyword)cUnitAlternatives_1_0.eContents().get(1);
		
		//TimeValue:
		//	time=NumberValue unit=('s' | 'ms');
		@Override public ParserRule getRule() { return rule; }
		
		//time=NumberValue unit=('s' | 'ms')
		public Group getGroup() { return cGroup; }
		
		//time=NumberValue
		public Assignment getTimeAssignment_0() { return cTimeAssignment_0; }
		
		//NumberValue
		public RuleCall getTimeNumberValueParserRuleCall_0_0() { return cTimeNumberValueParserRuleCall_0_0; }
		
		//unit=('s' | 'ms')
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//('s' | 'ms')
		public Alternatives getUnitAlternatives_1_0() { return cUnitAlternatives_1_0; }
		
		//'s'
		public Keyword getUnitSKeyword_1_0_0() { return cUnitSKeyword_1_0_0; }
		
		//'ms'
		public Keyword getUnitMsKeyword_1_0_1() { return cUnitMsKeyword_1_0_1; }
	}
	public class ViewSizeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.ViewSizeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueSizeValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cDynamicAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cDynamicAlternatives_1_0 = (Alternatives)cDynamicAssignment_1.eContents().get(0);
		private final Keyword cDynamicMatch_parentKeyword_1_0_0 = (Keyword)cDynamicAlternatives_1_0.eContents().get(0);
		private final Keyword cDynamicWrap_contentKeyword_1_0_1 = (Keyword)cDynamicAlternatives_1_0.eContents().get(1);
		
		//ViewSizeValue:
		//	value=SizeValue | dynamic=('match_parent' | 'wrap_content');
		@Override public ParserRule getRule() { return rule; }
		
		//value=SizeValue | dynamic=('match_parent' | 'wrap_content')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=SizeValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//SizeValue
		public RuleCall getValueSizeValueParserRuleCall_0_0() { return cValueSizeValueParserRuleCall_0_0; }
		
		//dynamic=('match_parent' | 'wrap_content')
		public Assignment getDynamicAssignment_1() { return cDynamicAssignment_1; }
		
		//('match_parent' | 'wrap_content')
		public Alternatives getDynamicAlternatives_1_0() { return cDynamicAlternatives_1_0; }
		
		//'match_parent'
		public Keyword getDynamicMatch_parentKeyword_1_0_0() { return cDynamicMatch_parentKeyword_1_0_0; }
		
		//'wrap_content'
		public Keyword getDynamicWrap_contentKeyword_1_0_1() { return cDynamicWrap_contentKeyword_1_0_1; }
	}
	public class SizeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.SizeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueNumberValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cDimensionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cDimensionAlternatives_1_0 = (Alternatives)cDimensionAssignment_1.eContents().get(0);
		private final Keyword cDimensionDpKeyword_1_0_0 = (Keyword)cDimensionAlternatives_1_0.eContents().get(0);
		private final Keyword cDimensionPxKeyword_1_0_1 = (Keyword)cDimensionAlternatives_1_0.eContents().get(1);
		private final Keyword cDimensionSpKeyword_1_0_2 = (Keyword)cDimensionAlternatives_1_0.eContents().get(2);
		private final Keyword cDimensionPtKeyword_1_0_3 = (Keyword)cDimensionAlternatives_1_0.eContents().get(3);
		private final Keyword cDimensionMmKeyword_1_0_4 = (Keyword)cDimensionAlternatives_1_0.eContents().get(4);
		
		//SizeValue:
		//	value=NumberValue dimension=('dp' | 'px' | 'sp' | 'pt' | 'mm')?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NumberValue dimension=('dp' | 'px' | 'sp' | 'pt' | 'mm')?
		public Group getGroup() { return cGroup; }
		
		//value=NumberValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//NumberValue
		public RuleCall getValueNumberValueParserRuleCall_0_0() { return cValueNumberValueParserRuleCall_0_0; }
		
		//dimension=('dp' | 'px' | 'sp' | 'pt' | 'mm')?
		public Assignment getDimensionAssignment_1() { return cDimensionAssignment_1; }
		
		//('dp' | 'px' | 'sp' | 'pt' | 'mm')
		public Alternatives getDimensionAlternatives_1_0() { return cDimensionAlternatives_1_0; }
		
		//'dp'
		public Keyword getDimensionDpKeyword_1_0_0() { return cDimensionDpKeyword_1_0_0; }
		
		//'px'
		public Keyword getDimensionPxKeyword_1_0_1() { return cDimensionPxKeyword_1_0_1; }
		
		//'sp'
		public Keyword getDimensionSpKeyword_1_0_2() { return cDimensionSpKeyword_1_0_2; }
		
		//'pt'
		public Keyword getDimensionPtKeyword_1_0_3() { return cDimensionPtKeyword_1_0_3; }
		
		//'mm'
		public Keyword getDimensionMmKeyword_1_0_4() { return cDimensionMmKeyword_1_0_4; }
	}
	public class FontStyleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.FontStyleValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNormalKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cItalicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FontStyleValue:
		//	'normal' | 'italic';
		@Override public ParserRule getRule() { return rule; }
		
		//'normal' | 'italic'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'normal'
		public Keyword getNormalKeyword_0() { return cNormalKeyword_0; }
		
		//'italic'
		public Keyword getItalicKeyword_1() { return cItalicKeyword_1; }
	}
	public class FontFamilyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.FontFamily");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FontFamily:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class PaintValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.PaintValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLinearGradientParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRadialGradientParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColorValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PaintValue:
		//	LinearGradient | RadialGradient | ColorValue;
		@Override public ParserRule getRule() { return rule; }
		
		//LinearGradient | RadialGradient | ColorValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LinearGradient
		public RuleCall getLinearGradientParserRuleCall_0() { return cLinearGradientParserRuleCall_0; }
		
		//RadialGradient
		public RuleCall getRadialGradientParserRuleCall_1() { return cRadialGradientParserRuleCall_1; }
		
		//ColorValue
		public RuleCall getColorValueParserRuleCall_2() { return cColorValueParserRuleCall_2; }
	}
	public class LinearGradientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.LinearGradient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinearKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cX1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cX1SizeValueParserRuleCall_2_0 = (RuleCall)cX1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cY1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cY1SizeValueParserRuleCall_4_0 = (RuleCall)cY1Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cX2Assignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cX2SizeValueParserRuleCall_8_0 = (RuleCall)cX2Assignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cY2Assignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cY2SizeValueParserRuleCall_10_0 = (RuleCall)cY2Assignment_10.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cStopsKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cLeftParenthesisKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cStopsAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cStopsStopValueParserRuleCall_13_1_0 = (RuleCall)cStopsAssignment_13_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Alternatives cAlternatives_14 = (Alternatives)cGroup.eContents().get(14);
		private final Keyword cRepeatKeyword_14_0 = (Keyword)cAlternatives_14.eContents().get(0);
		private final Keyword cReflectKeyword_14_1 = (Keyword)cAlternatives_14.eContents().get(1);
		
		//LinearGradient:
		//	'linear' '(' x1=SizeValue ',' y1=SizeValue ')' 'to' '(' x2=SizeValue ',' y2=SizeValue ')' 'stops' ('('
		//	stops+=StopValue ')')+ ('repeat' | 'reflect')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'linear' '(' x1=SizeValue ',' y1=SizeValue ')' 'to' '(' x2=SizeValue ',' y2=SizeValue ')' 'stops' ('(' stops+=StopValue
		//')')+ ('repeat' | 'reflect')?
		public Group getGroup() { return cGroup; }
		
		//'linear'
		public Keyword getLinearKeyword_0() { return cLinearKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//x1=SizeValue
		public Assignment getX1Assignment_2() { return cX1Assignment_2; }
		
		//SizeValue
		public RuleCall getX1SizeValueParserRuleCall_2_0() { return cX1SizeValueParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//y1=SizeValue
		public Assignment getY1Assignment_4() { return cY1Assignment_4; }
		
		//SizeValue
		public RuleCall getY1SizeValueParserRuleCall_4_0() { return cY1SizeValueParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//x2=SizeValue
		public Assignment getX2Assignment_8() { return cX2Assignment_8; }
		
		//SizeValue
		public RuleCall getX2SizeValueParserRuleCall_8_0() { return cX2SizeValueParserRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//y2=SizeValue
		public Assignment getY2Assignment_10() { return cY2Assignment_10; }
		
		//SizeValue
		public RuleCall getY2SizeValueParserRuleCall_10_0() { return cY2SizeValueParserRuleCall_10_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
		
		//'stops'
		public Keyword getStopsKeyword_12() { return cStopsKeyword_12; }
		
		//('(' stops+=StopValue ')')+
		public Group getGroup_13() { return cGroup_13; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_13_0() { return cLeftParenthesisKeyword_13_0; }
		
		//stops+=StopValue
		public Assignment getStopsAssignment_13_1() { return cStopsAssignment_13_1; }
		
		//StopValue
		public RuleCall getStopsStopValueParserRuleCall_13_1_0() { return cStopsStopValueParserRuleCall_13_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13_2() { return cRightParenthesisKeyword_13_2; }
		
		//('repeat' | 'reflect')?
		public Alternatives getAlternatives_14() { return cAlternatives_14; }
		
		//'repeat'
		public Keyword getRepeatKeyword_14_0() { return cRepeatKeyword_14_0; }
		
		//'reflect'
		public Keyword getReflectKeyword_14_1() { return cReflectKeyword_14_1; }
	}
	public class RadialGradientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.RadialGradient");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRadialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCxSizeValueParserRuleCall_1_1_0 = (RuleCall)cCxAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCyAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cCySizeValueParserRuleCall_1_3_0 = (RuleCall)cCyAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cRadiusAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRadiusSizeValueParserRuleCall_2_0 = (RuleCall)cRadiusAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFocusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFxAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFxSizeValueParserRuleCall_3_2_0 = (RuleCall)cFxAssignment_3_2.eContents().get(0);
		private final Keyword cCommaKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cFyAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cFySizeValueParserRuleCall_3_4_0 = (RuleCall)cFyAssignment_3_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Keyword cStopsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStopsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStopsStopValueParserRuleCall_5_1_0 = (RuleCall)cStopsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Keyword cRepeatKeyword_6_0 = (Keyword)cAlternatives_6.eContents().get(0);
		private final Keyword cReflectKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		//RadialGradient:
		//	'radial' ('(' cx=SizeValue ',' cy=SizeValue ')' ',')? radius=SizeValue ('focus' '(' fx=SizeValue ',' fy=SizeValue ')')
		//	'stops' ('(' stops+=StopValue ')')+ ('repeat' | 'reflect')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'radial' ('(' cx=SizeValue ',' cy=SizeValue ')' ',')? radius=SizeValue ('focus' '(' fx=SizeValue ',' fy=SizeValue ')')
		//'stops' ('(' stops+=StopValue ')')+ ('repeat' | 'reflect')?
		public Group getGroup() { return cGroup; }
		
		//'radial'
		public Keyword getRadialKeyword_0() { return cRadialKeyword_0; }
		
		//('(' cx=SizeValue ',' cy=SizeValue ')' ',')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//cx=SizeValue
		public Assignment getCxAssignment_1_1() { return cCxAssignment_1_1; }
		
		//SizeValue
		public RuleCall getCxSizeValueParserRuleCall_1_1_0() { return cCxSizeValueParserRuleCall_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//cy=SizeValue
		public Assignment getCyAssignment_1_3() { return cCyAssignment_1_3; }
		
		//SizeValue
		public RuleCall getCySizeValueParserRuleCall_1_3_0() { return cCySizeValueParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//','
		public Keyword getCommaKeyword_1_5() { return cCommaKeyword_1_5; }
		
		//radius=SizeValue
		public Assignment getRadiusAssignment_2() { return cRadiusAssignment_2; }
		
		//SizeValue
		public RuleCall getRadiusSizeValueParserRuleCall_2_0() { return cRadiusSizeValueParserRuleCall_2_0; }
		
		//('focus' '(' fx=SizeValue ',' fy=SizeValue ')')
		public Group getGroup_3() { return cGroup_3; }
		
		//'focus'
		public Keyword getFocusKeyword_3_0() { return cFocusKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//fx=SizeValue
		public Assignment getFxAssignment_3_2() { return cFxAssignment_3_2; }
		
		//SizeValue
		public RuleCall getFxSizeValueParserRuleCall_3_2_0() { return cFxSizeValueParserRuleCall_3_2_0; }
		
		//','
		public Keyword getCommaKeyword_3_3() { return cCommaKeyword_3_3; }
		
		//fy=SizeValue
		public Assignment getFyAssignment_3_4() { return cFyAssignment_3_4; }
		
		//SizeValue
		public RuleCall getFySizeValueParserRuleCall_3_4_0() { return cFySizeValueParserRuleCall_3_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
		
		//'stops'
		public Keyword getStopsKeyword_4() { return cStopsKeyword_4; }
		
		//('(' stops+=StopValue ')')+
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//stops+=StopValue
		public Assignment getStopsAssignment_5_1() { return cStopsAssignment_5_1; }
		
		//StopValue
		public RuleCall getStopsStopValueParserRuleCall_5_1_0() { return cStopsStopValueParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
		
		//('repeat' | 'reflect')?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'repeat'
		public Keyword getRepeatKeyword_6_0() { return cRepeatKeyword_6_0; }
		
		//'reflect'
		public Keyword getReflectKeyword_6_1() { return cReflectKeyword_6_1; }
	}
	public class StopValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.StopValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPosAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPosSizeValueParserRuleCall_0_0 = (RuleCall)cPosAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorColorValueParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		
		//StopValue:
		//	pos=SizeValue ',' color=ColorValue;
		@Override public ParserRule getRule() { return rule; }
		
		//pos=SizeValue ',' color=ColorValue
		public Group getGroup() { return cGroup; }
		
		//pos=SizeValue
		public Assignment getPosAssignment_0() { return cPosAssignment_0; }
		
		//SizeValue
		public RuleCall getPosSizeValueParserRuleCall_0_0() { return cPosSizeValueParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//color=ColorValue
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }
		
		//ColorValue
		public RuleCall getColorColorValueParserRuleCall_2_0() { return cColorColorValueParserRuleCall_2_0; }
	}
	public class ColorValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.ColorValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNamedColorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNamedColorNamedColorParserRuleCall_0_0 = (RuleCall)cNamedColorAssignment_0.eContents().get(0);
		private final Assignment cRgbAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRgbRGBColorParserRuleCall_1_0 = (RuleCall)cRgbAssignment_1.eContents().get(0);
		
		//ColorValue:
		//	namedColor=NamedColor | rgb=RGBColor;
		@Override public ParserRule getRule() { return rule; }
		
		//namedColor=NamedColor | rgb=RGBColor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//namedColor=NamedColor
		public Assignment getNamedColorAssignment_0() { return cNamedColorAssignment_0; }
		
		//NamedColor
		public RuleCall getNamedColorNamedColorParserRuleCall_0_0() { return cNamedColorNamedColorParserRuleCall_0_0; }
		
		//rgb=RGBColor
		public Assignment getRgbAssignment_1() { return cRgbAssignment_1; }
		
		//RGBColor
		public RuleCall getRgbRGBColorParserRuleCall_1_0() { return cRgbRGBColorParserRuleCall_1_0; }
	}
	public class NamedColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.NamedColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAliceblueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAntiquewhiteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAquaKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAquamarineKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAzureKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBeigeKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBisqueKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cBlackKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cBlanchedalmondKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cBlueKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cBluevioletKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cBrownKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cBurlywoodKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cCadetblueKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cChartreuseKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cChocolateKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cCoralKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cCornflowerblueKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cCornsilkKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cCrimsonKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cCyanKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cDarkblueKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cDarkcyanKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cDarkgoldenrodKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cDarkgrayKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cDarkgreenKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cDarkgreyKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cDarkkhakiKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cDarkmagentaKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cDarkolivegreenKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cDarkorangeKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cDarkorchidKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cDarkredKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cDarksalmonKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cDarkseagreenKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cDarkslateblueKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cDarkslategrayKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cDarkslategreyKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cDarkturquoiseKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cDarkvioletKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cDeeppinkKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cDeepskyblueKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cDimgrayKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cDimgreyKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cDodgerblueKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cFirebrickKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cFloralwhiteKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cForestgreenKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cFuchsiaKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cGainsboroKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cGhostwhiteKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cGoldKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cGoldenrodKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cGrayKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cGreenKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cGreenyellowKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		private final Keyword cGreyKeyword_56 = (Keyword)cAlternatives.eContents().get(56);
		private final Keyword cHoneydewKeyword_57 = (Keyword)cAlternatives.eContents().get(57);
		private final Keyword cHotpinkKeyword_58 = (Keyword)cAlternatives.eContents().get(58);
		private final Keyword cIndianredKeyword_59 = (Keyword)cAlternatives.eContents().get(59);
		private final Keyword cIndigoKeyword_60 = (Keyword)cAlternatives.eContents().get(60);
		private final Keyword cIvoryKeyword_61 = (Keyword)cAlternatives.eContents().get(61);
		private final Keyword cKhakiKeyword_62 = (Keyword)cAlternatives.eContents().get(62);
		private final Keyword cLavenderKeyword_63 = (Keyword)cAlternatives.eContents().get(63);
		private final Keyword cLavenderblushKeyword_64 = (Keyword)cAlternatives.eContents().get(64);
		private final Keyword cLawngreenKeyword_65 = (Keyword)cAlternatives.eContents().get(65);
		private final Keyword cLemonchiffonKeyword_66 = (Keyword)cAlternatives.eContents().get(66);
		private final Keyword cLightblueKeyword_67 = (Keyword)cAlternatives.eContents().get(67);
		private final Keyword cLightcoralKeyword_68 = (Keyword)cAlternatives.eContents().get(68);
		private final Keyword cLightcyanKeyword_69 = (Keyword)cAlternatives.eContents().get(69);
		private final Keyword cLightgoldenrodyellowKeyword_70 = (Keyword)cAlternatives.eContents().get(70);
		private final Keyword cLightgrayKeyword_71 = (Keyword)cAlternatives.eContents().get(71);
		private final Keyword cLightgreenKeyword_72 = (Keyword)cAlternatives.eContents().get(72);
		private final Keyword cLightgreyKeyword_73 = (Keyword)cAlternatives.eContents().get(73);
		private final Keyword cLightpinkKeyword_74 = (Keyword)cAlternatives.eContents().get(74);
		private final Keyword cLightsalmonKeyword_75 = (Keyword)cAlternatives.eContents().get(75);
		private final Keyword cLightseagreenKeyword_76 = (Keyword)cAlternatives.eContents().get(76);
		private final Keyword cLightskyblueKeyword_77 = (Keyword)cAlternatives.eContents().get(77);
		private final Keyword cLightslategrayKeyword_78 = (Keyword)cAlternatives.eContents().get(78);
		private final Keyword cLightslategreyKeyword_79 = (Keyword)cAlternatives.eContents().get(79);
		private final Keyword cLightsteelblueKeyword_80 = (Keyword)cAlternatives.eContents().get(80);
		private final Keyword cLightyellowKeyword_81 = (Keyword)cAlternatives.eContents().get(81);
		private final Keyword cLimeKeyword_82 = (Keyword)cAlternatives.eContents().get(82);
		private final Keyword cLimegreenKeyword_83 = (Keyword)cAlternatives.eContents().get(83);
		private final Keyword cLinenKeyword_84 = (Keyword)cAlternatives.eContents().get(84);
		private final Keyword cMagentaKeyword_85 = (Keyword)cAlternatives.eContents().get(85);
		private final Keyword cMaroonKeyword_86 = (Keyword)cAlternatives.eContents().get(86);
		private final Keyword cMediumaquamarineKeyword_87 = (Keyword)cAlternatives.eContents().get(87);
		private final Keyword cMediumblueKeyword_88 = (Keyword)cAlternatives.eContents().get(88);
		private final Keyword cMediumorchidKeyword_89 = (Keyword)cAlternatives.eContents().get(89);
		private final Keyword cMediumpurpleKeyword_90 = (Keyword)cAlternatives.eContents().get(90);
		private final Keyword cMediumseagreenKeyword_91 = (Keyword)cAlternatives.eContents().get(91);
		private final Keyword cMediumslateblueKeyword_92 = (Keyword)cAlternatives.eContents().get(92);
		private final Keyword cMediumspringgreenKeyword_93 = (Keyword)cAlternatives.eContents().get(93);
		private final Keyword cMediumturquoiseKeyword_94 = (Keyword)cAlternatives.eContents().get(94);
		private final Keyword cMediumvioletredKeyword_95 = (Keyword)cAlternatives.eContents().get(95);
		private final Keyword cMidnightblueKeyword_96 = (Keyword)cAlternatives.eContents().get(96);
		private final Keyword cMintcreamKeyword_97 = (Keyword)cAlternatives.eContents().get(97);
		private final Keyword cMistyroseKeyword_98 = (Keyword)cAlternatives.eContents().get(98);
		private final Keyword cMoccasinKeyword_99 = (Keyword)cAlternatives.eContents().get(99);
		private final Keyword cNavajowhiteKeyword_100 = (Keyword)cAlternatives.eContents().get(100);
		private final Keyword cNavyKeyword_101 = (Keyword)cAlternatives.eContents().get(101);
		private final Keyword cOldlaceKeyword_102 = (Keyword)cAlternatives.eContents().get(102);
		private final Keyword cOliveKeyword_103 = (Keyword)cAlternatives.eContents().get(103);
		private final Keyword cOlivedrabKeyword_104 = (Keyword)cAlternatives.eContents().get(104);
		private final Keyword cOrangeKeyword_105 = (Keyword)cAlternatives.eContents().get(105);
		private final Keyword cOrangeredKeyword_106 = (Keyword)cAlternatives.eContents().get(106);
		private final Keyword cOrchidKeyword_107 = (Keyword)cAlternatives.eContents().get(107);
		private final Keyword cPalegoldenrodKeyword_108 = (Keyword)cAlternatives.eContents().get(108);
		private final Keyword cPalegreenKeyword_109 = (Keyword)cAlternatives.eContents().get(109);
		private final Keyword cPaleturquoiseKeyword_110 = (Keyword)cAlternatives.eContents().get(110);
		private final Keyword cPalevioletredKeyword_111 = (Keyword)cAlternatives.eContents().get(111);
		private final Keyword cPapayawhipKeyword_112 = (Keyword)cAlternatives.eContents().get(112);
		private final Keyword cPeachpuffKeyword_113 = (Keyword)cAlternatives.eContents().get(113);
		private final Keyword cPeruKeyword_114 = (Keyword)cAlternatives.eContents().get(114);
		private final Keyword cPinkKeyword_115 = (Keyword)cAlternatives.eContents().get(115);
		private final Keyword cPlumKeyword_116 = (Keyword)cAlternatives.eContents().get(116);
		private final Keyword cPowderblueKeyword_117 = (Keyword)cAlternatives.eContents().get(117);
		private final Keyword cPurpleKeyword_118 = (Keyword)cAlternatives.eContents().get(118);
		private final Keyword cRedKeyword_119 = (Keyword)cAlternatives.eContents().get(119);
		private final Keyword cRosybrownKeyword_120 = (Keyword)cAlternatives.eContents().get(120);
		private final Keyword cRoyalblueKeyword_121 = (Keyword)cAlternatives.eContents().get(121);
		private final Keyword cSaddlebrownKeyword_122 = (Keyword)cAlternatives.eContents().get(122);
		private final Keyword cSalmonKeyword_123 = (Keyword)cAlternatives.eContents().get(123);
		private final Keyword cSandybrownKeyword_124 = (Keyword)cAlternatives.eContents().get(124);
		private final Keyword cSeagreenKeyword_125 = (Keyword)cAlternatives.eContents().get(125);
		private final Keyword cSeashellKeyword_126 = (Keyword)cAlternatives.eContents().get(126);
		private final Keyword cSiennaKeyword_127 = (Keyword)cAlternatives.eContents().get(127);
		private final Keyword cSilverKeyword_128 = (Keyword)cAlternatives.eContents().get(128);
		private final Keyword cSkyblueKeyword_129 = (Keyword)cAlternatives.eContents().get(129);
		private final Keyword cSlateblueKeyword_130 = (Keyword)cAlternatives.eContents().get(130);
		private final Keyword cSlategrayKeyword_131 = (Keyword)cAlternatives.eContents().get(131);
		private final Keyword cSlategreyKeyword_132 = (Keyword)cAlternatives.eContents().get(132);
		private final Keyword cSnowKeyword_133 = (Keyword)cAlternatives.eContents().get(133);
		private final Keyword cSpringgreenKeyword_134 = (Keyword)cAlternatives.eContents().get(134);
		private final Keyword cSteelblueKeyword_135 = (Keyword)cAlternatives.eContents().get(135);
		private final Keyword cTanKeyword_136 = (Keyword)cAlternatives.eContents().get(136);
		private final Keyword cTealKeyword_137 = (Keyword)cAlternatives.eContents().get(137);
		private final Keyword cThistleKeyword_138 = (Keyword)cAlternatives.eContents().get(138);
		private final Keyword cTomatoKeyword_139 = (Keyword)cAlternatives.eContents().get(139);
		private final Keyword cTurquoiseKeyword_140 = (Keyword)cAlternatives.eContents().get(140);
		private final Keyword cVioletKeyword_141 = (Keyword)cAlternatives.eContents().get(141);
		private final Keyword cWheatKeyword_142 = (Keyword)cAlternatives.eContents().get(142);
		private final Keyword cWhiteKeyword_143 = (Keyword)cAlternatives.eContents().get(143);
		private final Keyword cWhitesmokeKeyword_144 = (Keyword)cAlternatives.eContents().get(144);
		private final Keyword cYellowKeyword_145 = (Keyword)cAlternatives.eContents().get(145);
		private final Keyword cYellowgreenKeyword_146 = (Keyword)cAlternatives.eContents().get(146);
		private final Keyword cTransparentKeyword_147 = (Keyword)cAlternatives.eContents().get(147);
		
		//NamedColor:
		//	'aliceblue' | 'antiquewhite' | 'aqua' | 'aquamarine' |
		//	'azure' | 'beige' | 'bisque' | 'black' |
		//	'blanchedalmond' | 'blue' | 'blueviolet' | 'brown' |
		//	'burlywood' | 'cadetblue' | 'chartreuse' | 'chocolate' |
		//	'coral' | 'cornflowerblue' | 'cornsilk' | 'crimson' |
		//	'cyan' | 'darkblue' | 'darkcyan' | 'darkgoldenrod' |
		//	'darkgray' | 'darkgreen' | 'darkgrey' | 'darkkhaki' |
		//	'darkmagenta' | 'darkolivegreen' | 'darkorange' | 'darkorchid' |
		//	'darkred' | 'darksalmon' | 'darkseagreen' | 'darkslateblue' |
		//	'darkslategray' | 'darkslategrey' | 'darkturquoise' | 'darkviolet' |
		//	'deeppink' | 'deepskyblue' | 'dimgray' | 'dimgrey' |
		//	'dodgerblue' | 'firebrick' | 'floralwhite' | 'forestgreen' |
		//	'fuchsia' | 'gainsboro' | 'ghostwhite' | 'gold' |
		//	'goldenrod' | 'gray' | 'green' | 'greenyellow' |
		//	'grey' | 'honeydew' | 'hotpink' | 'indianred' |
		//	'indigo' | 'ivory' | 'khaki' | 'lavender' |
		//	'lavenderblush' | 'lawngreen' | 'lemonchiffon' | 'lightblue' |
		//	'lightcoral' | 'lightcyan' | 'lightgoldenrodyellow' | 'lightgray' |
		//	'lightgreen' | 'lightgrey' | 'lightpink' | 'lightsalmon' |
		//	'lightseagreen' | 'lightskyblue' | 'lightslategray' | 'lightslategrey' |
		//	'lightsteelblue' | 'lightyellow' | 'lime' | 'limegreen' |
		//	'linen' | 'magenta' | 'maroon' | 'mediumaquamarine' |
		//	'mediumblue' | 'mediumorchid' | 'mediumpurple' | 'mediumseagreen' |
		//	'mediumslateblue' | 'mediumspringgreen' | 'mediumturquoise' | 'mediumvioletred' |
		//	'midnightblue' | 'mintcream' | 'mistyrose' | 'moccasin' |
		//	'navajowhite' | 'navy' | 'oldlace' | 'olive' |
		//	'olivedrab' | 'orange' | 'orangered' | 'orchid' |
		//	'palegoldenrod' | 'palegreen' | 'paleturquoise' | 'palevioletred' |
		//	'papayawhip' | 'peachpuff' | 'peru' | 'pink' |
		//	'plum' | 'powderblue' | 'purple' | 'red' |
		//	'rosybrown' | 'royalblue' | 'saddlebrown' | 'salmon' |
		//	'sandybrown' | 'seagreen' | 'seashell' | 'sienna' |
		//	'silver' | 'skyblue' | 'slateblue' | 'slategray' |
		//	'slategrey' | 'snow' | 'springgreen' | 'steelblue' |
		//	'tan' | 'teal' | 'thistle' | 'tomato' |
		//	'turquoise' | 'violet' | 'wheat' | 'white' |
		//	'whitesmoke' | 'yellow' | 'yellowgreen' | 'transparent';
		@Override public ParserRule getRule() { return rule; }
		
		//'aliceblue' | 'antiquewhite' | 'aqua' | 'aquamarine' | 'azure' | 'beige' | 'bisque' | 'black' | 'blanchedalmond' |
		//'blue' | 'blueviolet' | 'brown' | 'burlywood' | 'cadetblue' | 'chartreuse' | 'chocolate' | 'coral' | 'cornflowerblue' |
		//'cornsilk' | 'crimson' | 'cyan' | 'darkblue' | 'darkcyan' | 'darkgoldenrod' | 'darkgray' | 'darkgreen' | 'darkgrey' |
		//'darkkhaki' | 'darkmagenta' | 'darkolivegreen' | 'darkorange' | 'darkorchid' | 'darkred' | 'darksalmon' |
		//'darkseagreen' | 'darkslateblue' | 'darkslategray' | 'darkslategrey' | 'darkturquoise' | 'darkviolet' | 'deeppink' |
		//'deepskyblue' | 'dimgray' | 'dimgrey' | 'dodgerblue' | 'firebrick' | 'floralwhite' | 'forestgreen' | 'fuchsia' |
		//'gainsboro' | 'ghostwhite' | 'gold' | 'goldenrod' | 'gray' | 'green' | 'greenyellow' | 'grey' | 'honeydew' | 'hotpink'
		//| 'indianred' | 'indigo' | 'ivory' | 'khaki' | 'lavender' | 'lavenderblush' | 'lawngreen' | 'lemonchiffon' |
		//'lightblue' | 'lightcoral' | 'lightcyan' | 'lightgoldenrodyellow' | 'lightgray' | 'lightgreen' | 'lightgrey' |
		//'lightpink' | 'lightsalmon' | 'lightseagreen' | 'lightskyblue' | 'lightslategray' | 'lightslategrey' | 'lightsteelblue'
		//| 'lightyellow' | 'lime' | 'limegreen' | 'linen' | 'magenta' | 'maroon' | 'mediumaquamarine' | 'mediumblue' |
		//'mediumorchid' | 'mediumpurple' | 'mediumseagreen' | 'mediumslateblue' | 'mediumspringgreen' | 'mediumturquoise' |
		//'mediumvioletred' | 'midnightblue' | 'mintcream' | 'mistyrose' | 'moccasin' | 'navajowhite' | 'navy' | 'oldlace' |
		//'olive' | 'olivedrab' | 'orange' | 'orangered' | 'orchid' | 'palegoldenrod' | 'palegreen' | 'paleturquoise' |
		//'palevioletred' | 'papayawhip' | 'peachpuff' | 'peru' | 'pink' | 'plum' | 'powderblue' | 'purple' | 'red' | 'rosybrown'
		//| 'royalblue' | 'saddlebrown' | 'salmon' | 'sandybrown' | 'seagreen' | 'seashell' | 'sienna' | 'silver' | 'skyblue' |
		//'slateblue' | 'slategray' | 'slategrey' | 'snow' | 'springgreen' | 'steelblue' | 'tan' | 'teal' | 'thistle' | 'tomato'
		//| 'turquoise' | 'violet' | 'wheat' | 'white' | 'whitesmoke' | 'yellow' | 'yellowgreen' | 'transparent'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'aliceblue'
		public Keyword getAliceblueKeyword_0() { return cAliceblueKeyword_0; }
		
		//'antiquewhite'
		public Keyword getAntiquewhiteKeyword_1() { return cAntiquewhiteKeyword_1; }
		
		//'aqua'
		public Keyword getAquaKeyword_2() { return cAquaKeyword_2; }
		
		//'aquamarine'
		public Keyword getAquamarineKeyword_3() { return cAquamarineKeyword_3; }
		
		//'azure'
		public Keyword getAzureKeyword_4() { return cAzureKeyword_4; }
		
		//'beige'
		public Keyword getBeigeKeyword_5() { return cBeigeKeyword_5; }
		
		//'bisque'
		public Keyword getBisqueKeyword_6() { return cBisqueKeyword_6; }
		
		//'black'
		public Keyword getBlackKeyword_7() { return cBlackKeyword_7; }
		
		//'blanchedalmond'
		public Keyword getBlanchedalmondKeyword_8() { return cBlanchedalmondKeyword_8; }
		
		//'blue'
		public Keyword getBlueKeyword_9() { return cBlueKeyword_9; }
		
		//'blueviolet'
		public Keyword getBluevioletKeyword_10() { return cBluevioletKeyword_10; }
		
		//'brown'
		public Keyword getBrownKeyword_11() { return cBrownKeyword_11; }
		
		//'burlywood'
		public Keyword getBurlywoodKeyword_12() { return cBurlywoodKeyword_12; }
		
		//'cadetblue'
		public Keyword getCadetblueKeyword_13() { return cCadetblueKeyword_13; }
		
		//'chartreuse'
		public Keyword getChartreuseKeyword_14() { return cChartreuseKeyword_14; }
		
		//'chocolate'
		public Keyword getChocolateKeyword_15() { return cChocolateKeyword_15; }
		
		//'coral'
		public Keyword getCoralKeyword_16() { return cCoralKeyword_16; }
		
		//'cornflowerblue'
		public Keyword getCornflowerblueKeyword_17() { return cCornflowerblueKeyword_17; }
		
		//'cornsilk'
		public Keyword getCornsilkKeyword_18() { return cCornsilkKeyword_18; }
		
		//'crimson'
		public Keyword getCrimsonKeyword_19() { return cCrimsonKeyword_19; }
		
		//'cyan'
		public Keyword getCyanKeyword_20() { return cCyanKeyword_20; }
		
		//'darkblue'
		public Keyword getDarkblueKeyword_21() { return cDarkblueKeyword_21; }
		
		//'darkcyan'
		public Keyword getDarkcyanKeyword_22() { return cDarkcyanKeyword_22; }
		
		//'darkgoldenrod'
		public Keyword getDarkgoldenrodKeyword_23() { return cDarkgoldenrodKeyword_23; }
		
		//'darkgray'
		public Keyword getDarkgrayKeyword_24() { return cDarkgrayKeyword_24; }
		
		//'darkgreen'
		public Keyword getDarkgreenKeyword_25() { return cDarkgreenKeyword_25; }
		
		//'darkgrey'
		public Keyword getDarkgreyKeyword_26() { return cDarkgreyKeyword_26; }
		
		//'darkkhaki'
		public Keyword getDarkkhakiKeyword_27() { return cDarkkhakiKeyword_27; }
		
		//'darkmagenta'
		public Keyword getDarkmagentaKeyword_28() { return cDarkmagentaKeyword_28; }
		
		//'darkolivegreen'
		public Keyword getDarkolivegreenKeyword_29() { return cDarkolivegreenKeyword_29; }
		
		//'darkorange'
		public Keyword getDarkorangeKeyword_30() { return cDarkorangeKeyword_30; }
		
		//'darkorchid'
		public Keyword getDarkorchidKeyword_31() { return cDarkorchidKeyword_31; }
		
		//'darkred'
		public Keyword getDarkredKeyword_32() { return cDarkredKeyword_32; }
		
		//'darksalmon'
		public Keyword getDarksalmonKeyword_33() { return cDarksalmonKeyword_33; }
		
		//'darkseagreen'
		public Keyword getDarkseagreenKeyword_34() { return cDarkseagreenKeyword_34; }
		
		//'darkslateblue'
		public Keyword getDarkslateblueKeyword_35() { return cDarkslateblueKeyword_35; }
		
		//'darkslategray'
		public Keyword getDarkslategrayKeyword_36() { return cDarkslategrayKeyword_36; }
		
		//'darkslategrey'
		public Keyword getDarkslategreyKeyword_37() { return cDarkslategreyKeyword_37; }
		
		//'darkturquoise'
		public Keyword getDarkturquoiseKeyword_38() { return cDarkturquoiseKeyword_38; }
		
		//'darkviolet'
		public Keyword getDarkvioletKeyword_39() { return cDarkvioletKeyword_39; }
		
		//'deeppink'
		public Keyword getDeeppinkKeyword_40() { return cDeeppinkKeyword_40; }
		
		//'deepskyblue'
		public Keyword getDeepskyblueKeyword_41() { return cDeepskyblueKeyword_41; }
		
		//'dimgray'
		public Keyword getDimgrayKeyword_42() { return cDimgrayKeyword_42; }
		
		//'dimgrey'
		public Keyword getDimgreyKeyword_43() { return cDimgreyKeyword_43; }
		
		//'dodgerblue'
		public Keyword getDodgerblueKeyword_44() { return cDodgerblueKeyword_44; }
		
		//'firebrick'
		public Keyword getFirebrickKeyword_45() { return cFirebrickKeyword_45; }
		
		//'floralwhite'
		public Keyword getFloralwhiteKeyword_46() { return cFloralwhiteKeyword_46; }
		
		//'forestgreen'
		public Keyword getForestgreenKeyword_47() { return cForestgreenKeyword_47; }
		
		//'fuchsia'
		public Keyword getFuchsiaKeyword_48() { return cFuchsiaKeyword_48; }
		
		//'gainsboro'
		public Keyword getGainsboroKeyword_49() { return cGainsboroKeyword_49; }
		
		//'ghostwhite'
		public Keyword getGhostwhiteKeyword_50() { return cGhostwhiteKeyword_50; }
		
		//'gold'
		public Keyword getGoldKeyword_51() { return cGoldKeyword_51; }
		
		//'goldenrod'
		public Keyword getGoldenrodKeyword_52() { return cGoldenrodKeyword_52; }
		
		//'gray'
		public Keyword getGrayKeyword_53() { return cGrayKeyword_53; }
		
		//'green'
		public Keyword getGreenKeyword_54() { return cGreenKeyword_54; }
		
		//'greenyellow'
		public Keyword getGreenyellowKeyword_55() { return cGreenyellowKeyword_55; }
		
		//'grey'
		public Keyword getGreyKeyword_56() { return cGreyKeyword_56; }
		
		//'honeydew'
		public Keyword getHoneydewKeyword_57() { return cHoneydewKeyword_57; }
		
		//'hotpink'
		public Keyword getHotpinkKeyword_58() { return cHotpinkKeyword_58; }
		
		//'indianred'
		public Keyword getIndianredKeyword_59() { return cIndianredKeyword_59; }
		
		//'indigo'
		public Keyword getIndigoKeyword_60() { return cIndigoKeyword_60; }
		
		//'ivory'
		public Keyword getIvoryKeyword_61() { return cIvoryKeyword_61; }
		
		//'khaki'
		public Keyword getKhakiKeyword_62() { return cKhakiKeyword_62; }
		
		//'lavender'
		public Keyword getLavenderKeyword_63() { return cLavenderKeyword_63; }
		
		//'lavenderblush'
		public Keyword getLavenderblushKeyword_64() { return cLavenderblushKeyword_64; }
		
		//'lawngreen'
		public Keyword getLawngreenKeyword_65() { return cLawngreenKeyword_65; }
		
		//'lemonchiffon'
		public Keyword getLemonchiffonKeyword_66() { return cLemonchiffonKeyword_66; }
		
		//'lightblue'
		public Keyword getLightblueKeyword_67() { return cLightblueKeyword_67; }
		
		//'lightcoral'
		public Keyword getLightcoralKeyword_68() { return cLightcoralKeyword_68; }
		
		//'lightcyan'
		public Keyword getLightcyanKeyword_69() { return cLightcyanKeyword_69; }
		
		//'lightgoldenrodyellow'
		public Keyword getLightgoldenrodyellowKeyword_70() { return cLightgoldenrodyellowKeyword_70; }
		
		//'lightgray'
		public Keyword getLightgrayKeyword_71() { return cLightgrayKeyword_71; }
		
		//'lightgreen'
		public Keyword getLightgreenKeyword_72() { return cLightgreenKeyword_72; }
		
		//'lightgrey'
		public Keyword getLightgreyKeyword_73() { return cLightgreyKeyword_73; }
		
		//'lightpink'
		public Keyword getLightpinkKeyword_74() { return cLightpinkKeyword_74; }
		
		//'lightsalmon'
		public Keyword getLightsalmonKeyword_75() { return cLightsalmonKeyword_75; }
		
		//'lightseagreen'
		public Keyword getLightseagreenKeyword_76() { return cLightseagreenKeyword_76; }
		
		//'lightskyblue'
		public Keyword getLightskyblueKeyword_77() { return cLightskyblueKeyword_77; }
		
		//'lightslategray'
		public Keyword getLightslategrayKeyword_78() { return cLightslategrayKeyword_78; }
		
		//'lightslategrey'
		public Keyword getLightslategreyKeyword_79() { return cLightslategreyKeyword_79; }
		
		//'lightsteelblue'
		public Keyword getLightsteelblueKeyword_80() { return cLightsteelblueKeyword_80; }
		
		//'lightyellow'
		public Keyword getLightyellowKeyword_81() { return cLightyellowKeyword_81; }
		
		//'lime'
		public Keyword getLimeKeyword_82() { return cLimeKeyword_82; }
		
		//'limegreen'
		public Keyword getLimegreenKeyword_83() { return cLimegreenKeyword_83; }
		
		//'linen'
		public Keyword getLinenKeyword_84() { return cLinenKeyword_84; }
		
		//'magenta'
		public Keyword getMagentaKeyword_85() { return cMagentaKeyword_85; }
		
		//'maroon'
		public Keyword getMaroonKeyword_86() { return cMaroonKeyword_86; }
		
		//'mediumaquamarine'
		public Keyword getMediumaquamarineKeyword_87() { return cMediumaquamarineKeyword_87; }
		
		//'mediumblue'
		public Keyword getMediumblueKeyword_88() { return cMediumblueKeyword_88; }
		
		//'mediumorchid'
		public Keyword getMediumorchidKeyword_89() { return cMediumorchidKeyword_89; }
		
		//'mediumpurple'
		public Keyword getMediumpurpleKeyword_90() { return cMediumpurpleKeyword_90; }
		
		//'mediumseagreen'
		public Keyword getMediumseagreenKeyword_91() { return cMediumseagreenKeyword_91; }
		
		//'mediumslateblue'
		public Keyword getMediumslateblueKeyword_92() { return cMediumslateblueKeyword_92; }
		
		//'mediumspringgreen'
		public Keyword getMediumspringgreenKeyword_93() { return cMediumspringgreenKeyword_93; }
		
		//'mediumturquoise'
		public Keyword getMediumturquoiseKeyword_94() { return cMediumturquoiseKeyword_94; }
		
		//'mediumvioletred'
		public Keyword getMediumvioletredKeyword_95() { return cMediumvioletredKeyword_95; }
		
		//'midnightblue'
		public Keyword getMidnightblueKeyword_96() { return cMidnightblueKeyword_96; }
		
		//'mintcream'
		public Keyword getMintcreamKeyword_97() { return cMintcreamKeyword_97; }
		
		//'mistyrose'
		public Keyword getMistyroseKeyword_98() { return cMistyroseKeyword_98; }
		
		//'moccasin'
		public Keyword getMoccasinKeyword_99() { return cMoccasinKeyword_99; }
		
		//'navajowhite'
		public Keyword getNavajowhiteKeyword_100() { return cNavajowhiteKeyword_100; }
		
		//'navy'
		public Keyword getNavyKeyword_101() { return cNavyKeyword_101; }
		
		//'oldlace'
		public Keyword getOldlaceKeyword_102() { return cOldlaceKeyword_102; }
		
		//'olive'
		public Keyword getOliveKeyword_103() { return cOliveKeyword_103; }
		
		//'olivedrab'
		public Keyword getOlivedrabKeyword_104() { return cOlivedrabKeyword_104; }
		
		//'orange'
		public Keyword getOrangeKeyword_105() { return cOrangeKeyword_105; }
		
		//'orangered'
		public Keyword getOrangeredKeyword_106() { return cOrangeredKeyword_106; }
		
		//'orchid'
		public Keyword getOrchidKeyword_107() { return cOrchidKeyword_107; }
		
		//'palegoldenrod'
		public Keyword getPalegoldenrodKeyword_108() { return cPalegoldenrodKeyword_108; }
		
		//'palegreen'
		public Keyword getPalegreenKeyword_109() { return cPalegreenKeyword_109; }
		
		//'paleturquoise'
		public Keyword getPaleturquoiseKeyword_110() { return cPaleturquoiseKeyword_110; }
		
		//'palevioletred'
		public Keyword getPalevioletredKeyword_111() { return cPalevioletredKeyword_111; }
		
		//'papayawhip'
		public Keyword getPapayawhipKeyword_112() { return cPapayawhipKeyword_112; }
		
		//'peachpuff'
		public Keyword getPeachpuffKeyword_113() { return cPeachpuffKeyword_113; }
		
		//'peru'
		public Keyword getPeruKeyword_114() { return cPeruKeyword_114; }
		
		//'pink'
		public Keyword getPinkKeyword_115() { return cPinkKeyword_115; }
		
		//'plum'
		public Keyword getPlumKeyword_116() { return cPlumKeyword_116; }
		
		//'powderblue'
		public Keyword getPowderblueKeyword_117() { return cPowderblueKeyword_117; }
		
		//'purple'
		public Keyword getPurpleKeyword_118() { return cPurpleKeyword_118; }
		
		//'red'
		public Keyword getRedKeyword_119() { return cRedKeyword_119; }
		
		//'rosybrown'
		public Keyword getRosybrownKeyword_120() { return cRosybrownKeyword_120; }
		
		//'royalblue'
		public Keyword getRoyalblueKeyword_121() { return cRoyalblueKeyword_121; }
		
		//'saddlebrown'
		public Keyword getSaddlebrownKeyword_122() { return cSaddlebrownKeyword_122; }
		
		//'salmon'
		public Keyword getSalmonKeyword_123() { return cSalmonKeyword_123; }
		
		//'sandybrown'
		public Keyword getSandybrownKeyword_124() { return cSandybrownKeyword_124; }
		
		//'seagreen'
		public Keyword getSeagreenKeyword_125() { return cSeagreenKeyword_125; }
		
		//'seashell'
		public Keyword getSeashellKeyword_126() { return cSeashellKeyword_126; }
		
		//'sienna'
		public Keyword getSiennaKeyword_127() { return cSiennaKeyword_127; }
		
		//'silver'
		public Keyword getSilverKeyword_128() { return cSilverKeyword_128; }
		
		//'skyblue'
		public Keyword getSkyblueKeyword_129() { return cSkyblueKeyword_129; }
		
		//'slateblue'
		public Keyword getSlateblueKeyword_130() { return cSlateblueKeyword_130; }
		
		//'slategray'
		public Keyword getSlategrayKeyword_131() { return cSlategrayKeyword_131; }
		
		//'slategrey'
		public Keyword getSlategreyKeyword_132() { return cSlategreyKeyword_132; }
		
		//'snow'
		public Keyword getSnowKeyword_133() { return cSnowKeyword_133; }
		
		//'springgreen'
		public Keyword getSpringgreenKeyword_134() { return cSpringgreenKeyword_134; }
		
		//'steelblue'
		public Keyword getSteelblueKeyword_135() { return cSteelblueKeyword_135; }
		
		//'tan'
		public Keyword getTanKeyword_136() { return cTanKeyword_136; }
		
		//'teal'
		public Keyword getTealKeyword_137() { return cTealKeyword_137; }
		
		//'thistle'
		public Keyword getThistleKeyword_138() { return cThistleKeyword_138; }
		
		//'tomato'
		public Keyword getTomatoKeyword_139() { return cTomatoKeyword_139; }
		
		//'turquoise'
		public Keyword getTurquoiseKeyword_140() { return cTurquoiseKeyword_140; }
		
		//'violet'
		public Keyword getVioletKeyword_141() { return cVioletKeyword_141; }
		
		//'wheat'
		public Keyword getWheatKeyword_142() { return cWheatKeyword_142; }
		
		//'white'
		public Keyword getWhiteKeyword_143() { return cWhiteKeyword_143; }
		
		//'whitesmoke'
		public Keyword getWhitesmokeKeyword_144() { return cWhitesmokeKeyword_144; }
		
		//'yellow'
		public Keyword getYellowKeyword_145() { return cYellowKeyword_145; }
		
		//'yellowgreen'
		public Keyword getYellowgreenKeyword_146() { return cYellowgreenKeyword_146; }
		
		//'transparent'
		public Keyword getTransparentKeyword_147() { return cTransparentKeyword_147; }
	}
	public class RGBColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.RGBColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cHexAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cHexHEX_NUMBERTerminalRuleCall_0_0 = (RuleCall)cHexAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRgbKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRIntegerValueParserRuleCall_1_2_0 = (RuleCall)cRAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cGAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cGIntegerValueParserRuleCall_1_4_0 = (RuleCall)cGAssignment_1_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cBAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cBIntegerValueParserRuleCall_1_6_0 = (RuleCall)cBAssignment_1_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cRgbaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRIntegerValueParserRuleCall_2_2_0 = (RuleCall)cRAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cGAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cGIntegerValueParserRuleCall_2_4_0 = (RuleCall)cGAssignment_2_4.eContents().get(0);
		private final Keyword cCommaKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cBAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cBIntegerValueParserRuleCall_2_6_0 = (RuleCall)cBAssignment_2_6.eContents().get(0);
		private final Keyword cCommaKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Assignment cAlphaAssignment_2_8 = (Assignment)cGroup_2.eContents().get(8);
		private final RuleCall cAlphaNumberValueParserRuleCall_2_8_0 = (RuleCall)cAlphaAssignment_2_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_9 = (Keyword)cGroup_2.eContents().get(9);
		
		//RGBColor:
		//	hex=HEX_NUMBER
		//	| 'rgb' '(' r=IntegerValue ',' g=IntegerValue ',' b=IntegerValue ')' | 'rgba' '(' r=IntegerValue ',' g=IntegerValue
		//	',' b=IntegerValue ',' alpha=NumberValue ')';
		@Override public ParserRule getRule() { return rule; }
		
		//hex=HEX_NUMBER | 'rgb' '(' r=IntegerValue ',' g=IntegerValue ',' b=IntegerValue ')' | 'rgba' '(' r=IntegerValue ','
		//g=IntegerValue ',' b=IntegerValue ',' alpha=NumberValue ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//hex=HEX_NUMBER
		public Assignment getHexAssignment_0() { return cHexAssignment_0; }
		
		//HEX_NUMBER
		public RuleCall getHexHEX_NUMBERTerminalRuleCall_0_0() { return cHexHEX_NUMBERTerminalRuleCall_0_0; }
		
		//'rgb' '(' r=IntegerValue ',' g=IntegerValue ',' b=IntegerValue ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'rgb'
		public Keyword getRgbKeyword_1_0() { return cRgbKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//r=IntegerValue
		public Assignment getRAssignment_1_2() { return cRAssignment_1_2; }
		
		//IntegerValue
		public RuleCall getRIntegerValueParserRuleCall_1_2_0() { return cRIntegerValueParserRuleCall_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }
		
		//g=IntegerValue
		public Assignment getGAssignment_1_4() { return cGAssignment_1_4; }
		
		//IntegerValue
		public RuleCall getGIntegerValueParserRuleCall_1_4_0() { return cGIntegerValueParserRuleCall_1_4_0; }
		
		//','
		public Keyword getCommaKeyword_1_5() { return cCommaKeyword_1_5; }
		
		//b=IntegerValue
		public Assignment getBAssignment_1_6() { return cBAssignment_1_6; }
		
		//IntegerValue
		public RuleCall getBIntegerValueParserRuleCall_1_6_0() { return cBIntegerValueParserRuleCall_1_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
		
		//'rgba' '(' r=IntegerValue ',' g=IntegerValue ',' b=IntegerValue ',' alpha=NumberValue ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'rgba'
		public Keyword getRgbaKeyword_2_0() { return cRgbaKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//r=IntegerValue
		public Assignment getRAssignment_2_2() { return cRAssignment_2_2; }
		
		//IntegerValue
		public RuleCall getRIntegerValueParserRuleCall_2_2_0() { return cRIntegerValueParserRuleCall_2_2_0; }
		
		//','
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }
		
		//g=IntegerValue
		public Assignment getGAssignment_2_4() { return cGAssignment_2_4; }
		
		//IntegerValue
		public RuleCall getGIntegerValueParserRuleCall_2_4_0() { return cGIntegerValueParserRuleCall_2_4_0; }
		
		//','
		public Keyword getCommaKeyword_2_5() { return cCommaKeyword_2_5; }
		
		//b=IntegerValue
		public Assignment getBAssignment_2_6() { return cBAssignment_2_6; }
		
		//IntegerValue
		public RuleCall getBIntegerValueParserRuleCall_2_6_0() { return cBIntegerValueParserRuleCall_2_6_0; }
		
		//','
		public Keyword getCommaKeyword_2_7() { return cCommaKeyword_2_7; }
		
		//alpha=NumberValue
		public Assignment getAlphaAssignment_2_8() { return cAlphaAssignment_2_8; }
		
		//NumberValue
		public RuleCall getAlphaNumberValueParserRuleCall_2_8_0() { return cAlphaNumberValueParserRuleCall_2_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_9() { return cRightParenthesisKeyword_2_9; }
	}
	public class HSBColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.HSBColor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHsbKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cHueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cHueNumberValueParserRuleCall_0_2_0 = (RuleCall)cHueAssignment_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cSaturationAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cSaturationNumberValueParserRuleCall_0_4_0 = (RuleCall)cSaturationAssignment_0_4.eContents().get(0);
		private final Keyword cPercentSignKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cCommaKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cBrightnessAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cBrightnessNumberValueParserRuleCall_0_7_0 = (RuleCall)cBrightnessAssignment_0_7.eContents().get(0);
		private final Keyword cPercentSignKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_0_9 = (Keyword)cGroup_0.eContents().get(9);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHsbaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cHueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cHueNumberValueParserRuleCall_1_2_0 = (RuleCall)cHueAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cSaturationAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cSaturationNumberValueParserRuleCall_1_4_0 = (RuleCall)cSaturationAssignment_1_4.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cBrightnessAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cBrightnessNumberValueParserRuleCall_1_7_0 = (RuleCall)cBrightnessAssignment_1_7.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Keyword cCommaKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		private final Assignment cAlphaAssignment_1_10 = (Assignment)cGroup_1.eContents().get(10);
		private final RuleCall cAlphaNumberValueParserRuleCall_1_10_0 = (RuleCall)cAlphaAssignment_1_10.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_11 = (Keyword)cGroup_1.eContents().get(11);
		
		//HSBColor:
		//	'hsb' '(' hue=NumberValue ',' saturation=NumberValue '%' ',' brightness=NumberValue '%' ')' | 'hsba' '('
		//	hue=NumberValue ',' saturation=NumberValue '%' ',' brightness=NumberValue '%' ',' alpha=NumberValue ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'hsb' '(' hue=NumberValue ',' saturation=NumberValue '%' ',' brightness=NumberValue '%' ')' | 'hsba' '(' hue=NumberValue
		//',' saturation=NumberValue '%' ',' brightness=NumberValue '%' ',' alpha=NumberValue ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'hsb' '(' hue=NumberValue ',' saturation=NumberValue '%' ',' brightness=NumberValue '%' ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'hsb'
		public Keyword getHsbKeyword_0_0() { return cHsbKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//hue=NumberValue
		public Assignment getHueAssignment_0_2() { return cHueAssignment_0_2; }
		
		//NumberValue
		public RuleCall getHueNumberValueParserRuleCall_0_2_0() { return cHueNumberValueParserRuleCall_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//saturation=NumberValue
		public Assignment getSaturationAssignment_0_4() { return cSaturationAssignment_0_4; }
		
		//NumberValue
		public RuleCall getSaturationNumberValueParserRuleCall_0_4_0() { return cSaturationNumberValueParserRuleCall_0_4_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_0_5() { return cPercentSignKeyword_0_5; }
		
		//','
		public Keyword getCommaKeyword_0_6() { return cCommaKeyword_0_6; }
		
		//brightness=NumberValue
		public Assignment getBrightnessAssignment_0_7() { return cBrightnessAssignment_0_7; }
		
		//NumberValue
		public RuleCall getBrightnessNumberValueParserRuleCall_0_7_0() { return cBrightnessNumberValueParserRuleCall_0_7_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_0_8() { return cPercentSignKeyword_0_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_9() { return cRightParenthesisKeyword_0_9; }
		
		//'hsba' '(' hue=NumberValue ',' saturation=NumberValue '%' ',' brightness=NumberValue '%' ',' alpha=NumberValue ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'hsba'
		public Keyword getHsbaKeyword_1_0() { return cHsbaKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//hue=NumberValue
		public Assignment getHueAssignment_1_2() { return cHueAssignment_1_2; }
		
		//NumberValue
		public RuleCall getHueNumberValueParserRuleCall_1_2_0() { return cHueNumberValueParserRuleCall_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }
		
		//saturation=NumberValue
		public Assignment getSaturationAssignment_1_4() { return cSaturationAssignment_1_4; }
		
		//NumberValue
		public RuleCall getSaturationNumberValueParserRuleCall_1_4_0() { return cSaturationNumberValueParserRuleCall_1_4_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_5() { return cPercentSignKeyword_1_5; }
		
		//','
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }
		
		//brightness=NumberValue
		public Assignment getBrightnessAssignment_1_7() { return cBrightnessAssignment_1_7; }
		
		//NumberValue
		public RuleCall getBrightnessNumberValueParserRuleCall_1_7_0() { return cBrightnessNumberValueParserRuleCall_1_7_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_8() { return cPercentSignKeyword_1_8; }
		
		//','
		public Keyword getCommaKeyword_1_9() { return cCommaKeyword_1_9; }
		
		//alpha=NumberValue
		public Assignment getAlphaAssignment_1_10() { return cAlphaAssignment_1_10; }
		
		//NumberValue
		public RuleCall getAlphaNumberValueParserRuleCall_1_10_0() { return cAlphaNumberValueParserRuleCall_1_10_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_11() { return cRightParenthesisKeyword_1_11; }
	}
	public class ColorFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.ColorFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDeriveKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOrigAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOrigColorValueParserRuleCall_0_2_0 = (RuleCall)cOrigAssignment_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cModAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cModNumberValueParserRuleCall_0_4_0 = (RuleCall)cModAssignment_0_4.eContents().get(0);
		private final Keyword cPercentSignKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLadderKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOrigAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOrigColorValueParserRuleCall_1_2_0 = (RuleCall)cOrigAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cStopsKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cStopNumbersAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cStopNumbersNumberValueParserRuleCall_1_5_1_0 = (RuleCall)cStopNumbersAssignment_1_5_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_5_2 = (Keyword)cGroup_1_5.eContents().get(2);
		private final Assignment cStopColorsAssignment_1_5_3 = (Assignment)cGroup_1_5.eContents().get(3);
		private final RuleCall cStopColorsColorValueParserRuleCall_1_5_3_0 = (RuleCall)cStopColorsAssignment_1_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5_4 = (Keyword)cGroup_1_5.eContents().get(4);
		
		//ColorFunction:
		//	'derive' '(' orig=ColorValue ',' mod=NumberValue '%' ')' | 'ladder' '(' orig=ColorValue ')' 'stops' ('('
		//	stopNumbers+=NumberValue ',' stopColors+=ColorValue ')')+;
		@Override public ParserRule getRule() { return rule; }
		
		//'derive' '(' orig=ColorValue ',' mod=NumberValue '%' ')' | 'ladder' '(' orig=ColorValue ')' 'stops' ('('
		//stopNumbers+=NumberValue ',' stopColors+=ColorValue ')')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'derive' '(' orig=ColorValue ',' mod=NumberValue '%' ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'derive'
		public Keyword getDeriveKeyword_0_0() { return cDeriveKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//orig=ColorValue
		public Assignment getOrigAssignment_0_2() { return cOrigAssignment_0_2; }
		
		//ColorValue
		public RuleCall getOrigColorValueParserRuleCall_0_2_0() { return cOrigColorValueParserRuleCall_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//mod=NumberValue
		public Assignment getModAssignment_0_4() { return cModAssignment_0_4; }
		
		//NumberValue
		public RuleCall getModNumberValueParserRuleCall_0_4_0() { return cModNumberValueParserRuleCall_0_4_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_0_5() { return cPercentSignKeyword_0_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }
		
		//'ladder' '(' orig=ColorValue ')' 'stops' ('(' stopNumbers+=NumberValue ',' stopColors+=ColorValue ')')+
		public Group getGroup_1() { return cGroup_1; }
		
		//'ladder'
		public Keyword getLadderKeyword_1_0() { return cLadderKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//orig=ColorValue
		public Assignment getOrigAssignment_1_2() { return cOrigAssignment_1_2; }
		
		//ColorValue
		public RuleCall getOrigColorValueParserRuleCall_1_2_0() { return cOrigColorValueParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'stops'
		public Keyword getStopsKeyword_1_4() { return cStopsKeyword_1_4; }
		
		//('(' stopNumbers+=NumberValue ',' stopColors+=ColorValue ')')+
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_5_0() { return cLeftParenthesisKeyword_1_5_0; }
		
		//stopNumbers+=NumberValue
		public Assignment getStopNumbersAssignment_1_5_1() { return cStopNumbersAssignment_1_5_1; }
		
		//NumberValue
		public RuleCall getStopNumbersNumberValueParserRuleCall_1_5_1_0() { return cStopNumbersNumberValueParserRuleCall_1_5_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_5_2() { return cCommaKeyword_1_5_2; }
		
		//stopColors+=ColorValue
		public Assignment getStopColorsAssignment_1_5_3() { return cStopColorsAssignment_1_5_3; }
		
		//ColorValue
		public RuleCall getStopColorsColorValueParserRuleCall_1_5_3_0() { return cStopColorsColorValueParserRuleCall_1_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5_4() { return cRightParenthesisKeyword_1_5_4; }
	}
	
	
	private final CSSElements pCSS;
	private final DefinitionElements pDefinition;
	private final SelectorElements pSelector;
	private final SimpleSelectorElements pSimpleSelector;
	private final IdSelectorElements pIdSelector;
	private final ClassSelectorElements pClassSelector;
	private final PseudoClassSelectorElements pPseudoClassSelector;
	private final CSSPropertyElements pCSSProperty;
	private final FontFamilyPropertyElements pFontFamilyProperty;
	private final FontStylePropertyElements pFontStyleProperty;
	private final ViewSizePropertyElements pViewSizeProperty;
	private final ShorthandSizePropertyElements pShorthandSizeProperty;
	private final BorderRadiusPropertyElements pBorderRadiusProperty;
	private final SizePropertyElements pSizeProperty;
	private final PaintPropertyElements pPaintProperty;
	private final TransitionPropertyElements pTransitionProperty;
	private final TransitionValueElements pTransitionValue;
	private final DrawablePropertyElements pDrawableProperty;
	private final BackgroundRepeatPropertyElements pBackgroundRepeatProperty;
	private final BorderPropertyElements pBorderProperty;
	private final BackgroundFilterPropertyElements pBackgroundFilterProperty;
	private final RepeatValueElements pRepeatValue;
	private final GravityValueElements pGravityValue;
	private final BackgroundGravityPropertyElements pBackgroundGravityProperty;
	private final FilterValueElements pFilterValue;
	private final BackgroundFilterTypePropertyElements pBackgroundFilterTypeProperty;
	private final ShorthandColorPropertyElements pShorthandColorProperty;
	private final ColorPropertyElements pColorProperty;
	private final AlignmentPropertyElements pAlignmentProperty;
	private final TimingFunctionElements pTimingFunction;
	private final PropertyNameValueElements pPropertyNameValue;
	private final NumberValueElements pNumberValue;
	private final IntegerValueElements pIntegerValue;
	private final RealValueElements pRealValue;
	private final TimeValueElements pTimeValue;
	private final ViewSizeValueElements pViewSizeValue;
	private final SizeValueElements pSizeValue;
	private final FontStyleValueElements pFontStyleValue;
	private final FontFamilyElements pFontFamily;
	private final PaintValueElements pPaintValue;
	private final LinearGradientElements pLinearGradient;
	private final RadialGradientElements pRadialGradient;
	private final StopValueElements pStopValue;
	private final ColorValueElements pColorValue;
	private final NamedColorElements pNamedColor;
	private final RGBColorElements pRGBColor;
	private final HSBColorElements pHSBColor;
	private final ColorFunctionElements pColorFunction;
	private final TerminalRule tREAL;
	private final TerminalRule tHEX_NUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LatteCSSGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCSS = new CSSElements();
		this.pDefinition = new DefinitionElements();
		this.pSelector = new SelectorElements();
		this.pSimpleSelector = new SimpleSelectorElements();
		this.pIdSelector = new IdSelectorElements();
		this.pClassSelector = new ClassSelectorElements();
		this.pPseudoClassSelector = new PseudoClassSelectorElements();
		this.pCSSProperty = new CSSPropertyElements();
		this.pFontFamilyProperty = new FontFamilyPropertyElements();
		this.pFontStyleProperty = new FontStylePropertyElements();
		this.pViewSizeProperty = new ViewSizePropertyElements();
		this.pShorthandSizeProperty = new ShorthandSizePropertyElements();
		this.pBorderRadiusProperty = new BorderRadiusPropertyElements();
		this.pSizeProperty = new SizePropertyElements();
		this.pPaintProperty = new PaintPropertyElements();
		this.pTransitionProperty = new TransitionPropertyElements();
		this.pTransitionValue = new TransitionValueElements();
		this.pDrawableProperty = new DrawablePropertyElements();
		this.pBackgroundRepeatProperty = new BackgroundRepeatPropertyElements();
		this.pBorderProperty = new BorderPropertyElements();
		this.pBackgroundFilterProperty = new BackgroundFilterPropertyElements();
		this.pRepeatValue = new RepeatValueElements();
		this.pGravityValue = new GravityValueElements();
		this.pBackgroundGravityProperty = new BackgroundGravityPropertyElements();
		this.pFilterValue = new FilterValueElements();
		this.pBackgroundFilterTypeProperty = new BackgroundFilterTypePropertyElements();
		this.pShorthandColorProperty = new ShorthandColorPropertyElements();
		this.pColorProperty = new ColorPropertyElements();
		this.pAlignmentProperty = new AlignmentPropertyElements();
		this.pTimingFunction = new TimingFunctionElements();
		this.pPropertyNameValue = new PropertyNameValueElements();
		this.pNumberValue = new NumberValueElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pRealValue = new RealValueElements();
		this.pTimeValue = new TimeValueElements();
		this.pViewSizeValue = new ViewSizeValueElements();
		this.pSizeValue = new SizeValueElements();
		this.pFontStyleValue = new FontStyleValueElements();
		this.pFontFamily = new FontFamilyElements();
		this.pPaintValue = new PaintValueElements();
		this.pLinearGradient = new LinearGradientElements();
		this.pRadialGradient = new RadialGradientElements();
		this.pStopValue = new StopValueElements();
		this.pColorValue = new ColorValueElements();
		this.pNamedColor = new NamedColorElements();
		this.pRGBColor = new RGBColorElements();
		this.pHSBColor = new HSBColorElements();
		this.pColorFunction = new ColorFunctionElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.REAL");
		this.tHEX_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "io.lattekit.dsl.LatteCSS.HEX_NUMBER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.lattekit.dsl.LatteCSS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CSS:
	//	definitions+=Definition+;
	public CSSElements getCSSAccess() {
		return pCSS;
	}
	
	public ParserRule getCSSRule() {
		return getCSSAccess().getRule();
	}
	
	//Definition:
	//	selector+=Selector (',' selector+=Selector)*
	//	'{'
	//	properties+=CSSProperty+
	//	'}';
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Selector:
	//	simpleSelector+=SimpleSelector+;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//SimpleSelector:
	//	element=ID | id=IdSelector pseudoClass=PseudoClassSelector? | class=ClassSelector pseudoClass=PseudoClassSelector?;
	public SimpleSelectorElements getSimpleSelectorAccess() {
		return pSimpleSelector;
	}
	
	public ParserRule getSimpleSelectorRule() {
		return getSimpleSelectorAccess().getRule();
	}
	
	//IdSelector:
	//	'#' id=ID;
	public IdSelectorElements getIdSelectorAccess() {
		return pIdSelector;
	}
	
	public ParserRule getIdSelectorRule() {
		return getIdSelectorAccess().getRule();
	}
	
	//ClassSelector:
	//	'.' class=ID;
	public ClassSelectorElements getClassSelectorAccess() {
		return pClassSelector;
	}
	
	public ParserRule getClassSelectorRule() {
		return getClassSelectorAccess().getRule();
	}
	
	//PseudoClassSelector:
	//	':' value=ID;
	public PseudoClassSelectorElements getPseudoClassSelectorAccess() {
		return pPseudoClassSelector;
	}
	
	public ParserRule getPseudoClassSelectorRule() {
		return getPseudoClassSelectorAccess().getRule();
	}
	
	//CSSProperty:
	//	(TransitionProperty | FontFamilyProperty | FontStyleProperty | SizeProperty | ShorthandSizeProperty |
	//	ShorthandColorProperty | BorderRadiusProperty | ViewSizeProperty | PaintProperty | ColorProperty | DrawableProperty |
	//	BackgroundRepeatProperty | BackgroundFilterTypeProperty | BackgroundGravityProperty | BackgroundFilterProperty |
	//	BorderProperty | AlignmentProperty) ';';
	public CSSPropertyElements getCSSPropertyAccess() {
		return pCSSProperty;
	}
	
	public ParserRule getCSSPropertyRule() {
		return getCSSPropertyAccess().getRule();
	}
	
	//FontFamilyProperty:
	//	property='font-family'
	//	':' value=STRING;
	public FontFamilyPropertyElements getFontFamilyPropertyAccess() {
		return pFontFamilyProperty;
	}
	
	public ParserRule getFontFamilyPropertyRule() {
		return getFontFamilyPropertyAccess().getRule();
	}
	
	//FontStyleProperty:
	//	property='font-style'
	//	':' value=('normal' | 'bold' | 'bold-italic');
	public FontStylePropertyElements getFontStylePropertyAccess() {
		return pFontStyleProperty;
	}
	
	public ParserRule getFontStylePropertyRule() {
		return getFontStylePropertyAccess().getRule();
	}
	
	//ViewSizeProperty:
	//	property=('width' | 'height') ':' value=ViewSizeValue;
	public ViewSizePropertyElements getViewSizePropertyAccess() {
		return pViewSizeProperty;
	}
	
	public ParserRule getViewSizePropertyRule() {
		return getViewSizePropertyAccess().getRule();
	}
	
	//ShorthandSizeProperty:
	//	property=('border-width' | 'border-radius' | 'margin' | 'padding') ':' values+=SizeValue+;
	public ShorthandSizePropertyElements getShorthandSizePropertyAccess() {
		return pShorthandSizeProperty;
	}
	
	public ParserRule getShorthandSizePropertyRule() {
		return getShorthandSizePropertyAccess().getRule();
	}
	
	//BorderRadiusProperty:
	//	property=('border-top-left-radius' | 'border-top-right-radius' | 'border-bottom-left-radius' |
	//	'border-bottom-right-radius') ':' values+=SizeValue+;
	public BorderRadiusPropertyElements getBorderRadiusPropertyAccess() {
		return pBorderRadiusProperty;
	}
	
	public ParserRule getBorderRadiusPropertyRule() {
		return getBorderRadiusPropertyAccess().getRule();
	}
	
	//SizeProperty:
	//	property=('border-left-width' | 'border-right-width' | 'border-top-width' | 'border-bottom-width'
	//	| 'font-size'
	//	| 'translate-x' | 'translate-y'
	//	| 'margin-left' | 'margin-right' | 'margin-top' | 'margin-bottom'
	//	| 'padding-left' | 'padding-right' | 'padding-top' | 'padding-bottom'
	//	| 'x' | 'y'
	//	| 'elevation') ':' value=SizeValue;
	public SizePropertyElements getSizePropertyAccess() {
		return pSizeProperty;
	}
	
	public ParserRule getSizePropertyRule() {
		return getSizePropertyAccess().getRule();
	}
	
	//PaintProperty:
	//	property='background'
	//	':' value=PaintValue;
	public PaintPropertyElements getPaintPropertyAccess() {
		return pPaintProperty;
	}
	
	public ParserRule getPaintPropertyRule() {
		return getPaintPropertyAccess().getRule();
	}
	
	//TransitionProperty:
	//	property='transition' ':' transitions+=TransitionValue (',' transitions+=TransitionValue)*;
	public TransitionPropertyElements getTransitionPropertyAccess() {
		return pTransitionProperty;
	}
	
	public ParserRule getTransitionPropertyRule() {
		return getTransitionPropertyAccess().getRule();
	}
	
	//TransitionValue:
	//	propertyName=PropertyNameValue duration=TimeValue timingFunction=TimingFunction? delay=TimeValue?;
	public TransitionValueElements getTransitionValueAccess() {
		return pTransitionValue;
	}
	
	public ParserRule getTransitionValueRule() {
		return getTransitionValueAccess().getRule();
	}
	
	//DrawableProperty:
	//	property='background-drawable' ':' value=STRING;
	public DrawablePropertyElements getDrawablePropertyAccess() {
		return pDrawableProperty;
	}
	
	public ParserRule getDrawablePropertyRule() {
		return getDrawablePropertyAccess().getRule();
	}
	
	//BackgroundRepeatProperty:
	//	property='background-repeat' ':' values+=RepeatValue values+=RepeatValue?;
	public BackgroundRepeatPropertyElements getBackgroundRepeatPropertyAccess() {
		return pBackgroundRepeatProperty;
	}
	
	public ParserRule getBackgroundRepeatPropertyRule() {
		return getBackgroundRepeatPropertyAccess().getRule();
	}
	
	//BorderProperty:
	//	property=('border' | 'border-top' | 'border-bottom' | 'border-left' | 'border-right') ':' width=SizeValue?
	//	style=('solid' | 'dashed' | 'dotted') color=ColorValue?;
	public BorderPropertyElements getBorderPropertyAccess() {
		return pBorderProperty;
	}
	
	public ParserRule getBorderPropertyRule() {
		return getBorderPropertyAccess().getRule();
	}
	
	//BackgroundFilterProperty:
	//	property='background-filter' ':' color=ColorValue filter=FilterValue?;
	public BackgroundFilterPropertyElements getBackgroundFilterPropertyAccess() {
		return pBackgroundFilterProperty;
	}
	
	public ParserRule getBackgroundFilterPropertyRule() {
		return getBackgroundFilterPropertyAccess().getRule();
	}
	
	//RepeatValue:
	//	'repeat-x' | 'mirror-x' | 'clamp-x' | 'no-repeat-x' | 'repeat-y' | 'mirror-y' | 'clamp-y' | 'no-repeat-y';
	public RepeatValueElements getRepeatValueAccess() {
		return pRepeatValue;
	}
	
	public ParserRule getRepeatValueRule() {
		return getRepeatValueAccess().getRule();
	}
	
	//GravityValue:
	//	'top' | 'bottom' | 'left' | 'right' | 'center_vertical' | 'fill_vertical' | 'center_horizontal' |
	//	'fill_horizontal' | 'center' | 'fill' | 'clip_vertical' | 'clip_horizontal' | 'start' | 'end';
	public GravityValueElements getGravityValueAccess() {
		return pGravityValue;
	}
	
	public ParserRule getGravityValueRule() {
		return getGravityValueAccess().getRule();
	}
	
	//BackgroundGravityProperty:
	//	property='background-gravity' ':' values+=GravityValue (',' values+=GravityValue)*;
	public BackgroundGravityPropertyElements getBackgroundGravityPropertyAccess() {
		return pBackgroundGravityProperty;
	}
	
	public ParserRule getBackgroundGravityPropertyRule() {
		return getBackgroundGravityPropertyAccess().getRule();
	}
	
	//FilterValue:
	//	'add' | 'clear' | 'darken' | 'dst' | 'dst_atop' | 'dst_in' | 'dst_out' |
	//	'dst_over' | 'lighten' | 'multiply' | 'overlay' | 'screen' | 'src' | 'src_atop' | 'src_in' | 'src_out'
	//	| 'src_over' | 'xor';
	public FilterValueElements getFilterValueAccess() {
		return pFilterValue;
	}
	
	public ParserRule getFilterValueRule() {
		return getFilterValueAccess().getRule();
	}
	
	//BackgroundFilterTypeProperty:
	//	property='background-filter-type' ':' value=FilterValue;
	public BackgroundFilterTypePropertyElements getBackgroundFilterTypePropertyAccess() {
		return pBackgroundFilterTypeProperty;
	}
	
	public ParserRule getBackgroundFilterTypePropertyRule() {
		return getBackgroundFilterTypePropertyAccess().getRule();
	}
	
	//ShorthandColorProperty:
	//	property='border-color' ':' values+=ColorValue+;
	public ShorthandColorPropertyElements getShorthandColorPropertyAccess() {
		return pShorthandColorProperty;
	}
	
	public ParserRule getShorthandColorPropertyRule() {
		return getShorthandColorPropertyAccess().getRule();
	}
	
	//ColorProperty:
	//	property=('border-top-color' | 'border-left-color' | 'border-right-color' | 'border-bottom-color' |
	//	'ripple-color' | 'background-color' | 'text-color' | 'background-filter-color') ':' value=ColorValue;
	public ColorPropertyElements getColorPropertyAccess() {
		return pColorProperty;
	}
	
	public ParserRule getColorPropertyRule() {
		return getColorPropertyAccess().getRule();
	}
	
	//AlignmentProperty:
	//	property='text-align'
	//	':' value=('left' | 'center' | 'right' | 'justify');
	public AlignmentPropertyElements getAlignmentPropertyAccess() {
		return pAlignmentProperty;
	}
	
	public ParserRule getAlignmentPropertyRule() {
		return getAlignmentPropertyAccess().getRule();
	}
	
	//TimingFunction:
	//	'accelerate-decelerate' | 'accelerate' | 'anticipate' | 'anticipate-overshoot' | 'bounce' |
	//	'cycle' | 'decelerate' | 'fast-out' | 'fast-out-slow' | 'linear' | 'linear-out' | 'overshoot';
	public TimingFunctionElements getTimingFunctionAccess() {
		return pTimingFunction;
	}
	
	public ParserRule getTimingFunctionRule() {
		return getTimingFunctionAccess().getRule();
	}
	
	////
	//// ---------------
	//// Values
	//// ---------------
	//PropertyNameValue:
	//	'margin' | 'margin-top' | 'margin-bottom' | 'margin-left' | 'margin-right' |
	//	'padding' | 'padding-top' | 'padding-bottom' | 'padding-left' | 'padding-right' |
	//	'width' | 'height' | 'translateX' | 'translateY' | 'x' | 'y' | 'elevation' | 'font-size' |
	//	'border-radius' | 'border-top-left-radius' | 'border-top-right-radius' | 'border-bottom-left-radius' |
	//	'border-bottom-right-radius' |
	//	'border-width' | 'border-left-width' | 'border-right-width' | 'border-top-width' | 'border-bottom-width' |
	//	'border';
	public PropertyNameValueElements getPropertyNameValueAccess() {
		return pPropertyNameValue;
	}
	
	public ParserRule getPropertyNameValueRule() {
		return getPropertyNameValueAccess().getRule();
	}
	
	//NumberValue:
	//	IntegerValue | RealValue;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	//IntegerValue:
	//	INT;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}
	
	//RealValue:
	//	REAL;
	public RealValueElements getRealValueAccess() {
		return pRealValue;
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}
	
	//TimeValue:
	//	time=NumberValue unit=('s' | 'ms');
	public TimeValueElements getTimeValueAccess() {
		return pTimeValue;
	}
	
	public ParserRule getTimeValueRule() {
		return getTimeValueAccess().getRule();
	}
	
	//ViewSizeValue:
	//	value=SizeValue | dynamic=('match_parent' | 'wrap_content');
	public ViewSizeValueElements getViewSizeValueAccess() {
		return pViewSizeValue;
	}
	
	public ParserRule getViewSizeValueRule() {
		return getViewSizeValueAccess().getRule();
	}
	
	//SizeValue:
	//	value=NumberValue dimension=('dp' | 'px' | 'sp' | 'pt' | 'mm')?;
	public SizeValueElements getSizeValueAccess() {
		return pSizeValue;
	}
	
	public ParserRule getSizeValueRule() {
		return getSizeValueAccess().getRule();
	}
	
	//FontStyleValue:
	//	'normal' | 'italic';
	public FontStyleValueElements getFontStyleValueAccess() {
		return pFontStyleValue;
	}
	
	public ParserRule getFontStyleValueRule() {
		return getFontStyleValueAccess().getRule();
	}
	
	//FontFamily:
	//	STRING;
	public FontFamilyElements getFontFamilyAccess() {
		return pFontFamily;
	}
	
	public ParserRule getFontFamilyRule() {
		return getFontFamilyAccess().getRule();
	}
	
	//PaintValue:
	//	LinearGradient | RadialGradient | ColorValue;
	public PaintValueElements getPaintValueAccess() {
		return pPaintValue;
	}
	
	public ParserRule getPaintValueRule() {
		return getPaintValueAccess().getRule();
	}
	
	//LinearGradient:
	//	'linear' '(' x1=SizeValue ',' y1=SizeValue ')' 'to' '(' x2=SizeValue ',' y2=SizeValue ')' 'stops' ('('
	//	stops+=StopValue ')')+ ('repeat' | 'reflect')?;
	public LinearGradientElements getLinearGradientAccess() {
		return pLinearGradient;
	}
	
	public ParserRule getLinearGradientRule() {
		return getLinearGradientAccess().getRule();
	}
	
	//RadialGradient:
	//	'radial' ('(' cx=SizeValue ',' cy=SizeValue ')' ',')? radius=SizeValue ('focus' '(' fx=SizeValue ',' fy=SizeValue ')')
	//	'stops' ('(' stops+=StopValue ')')+ ('repeat' | 'reflect')?;
	public RadialGradientElements getRadialGradientAccess() {
		return pRadialGradient;
	}
	
	public ParserRule getRadialGradientRule() {
		return getRadialGradientAccess().getRule();
	}
	
	//StopValue:
	//	pos=SizeValue ',' color=ColorValue;
	public StopValueElements getStopValueAccess() {
		return pStopValue;
	}
	
	public ParserRule getStopValueRule() {
		return getStopValueAccess().getRule();
	}
	
	//ColorValue:
	//	namedColor=NamedColor | rgb=RGBColor;
	public ColorValueElements getColorValueAccess() {
		return pColorValue;
	}
	
	public ParserRule getColorValueRule() {
		return getColorValueAccess().getRule();
	}
	
	//NamedColor:
	//	'aliceblue' | 'antiquewhite' | 'aqua' | 'aquamarine' |
	//	'azure' | 'beige' | 'bisque' | 'black' |
	//	'blanchedalmond' | 'blue' | 'blueviolet' | 'brown' |
	//	'burlywood' | 'cadetblue' | 'chartreuse' | 'chocolate' |
	//	'coral' | 'cornflowerblue' | 'cornsilk' | 'crimson' |
	//	'cyan' | 'darkblue' | 'darkcyan' | 'darkgoldenrod' |
	//	'darkgray' | 'darkgreen' | 'darkgrey' | 'darkkhaki' |
	//	'darkmagenta' | 'darkolivegreen' | 'darkorange' | 'darkorchid' |
	//	'darkred' | 'darksalmon' | 'darkseagreen' | 'darkslateblue' |
	//	'darkslategray' | 'darkslategrey' | 'darkturquoise' | 'darkviolet' |
	//	'deeppink' | 'deepskyblue' | 'dimgray' | 'dimgrey' |
	//	'dodgerblue' | 'firebrick' | 'floralwhite' | 'forestgreen' |
	//	'fuchsia' | 'gainsboro' | 'ghostwhite' | 'gold' |
	//	'goldenrod' | 'gray' | 'green' | 'greenyellow' |
	//	'grey' | 'honeydew' | 'hotpink' | 'indianred' |
	//	'indigo' | 'ivory' | 'khaki' | 'lavender' |
	//	'lavenderblush' | 'lawngreen' | 'lemonchiffon' | 'lightblue' |
	//	'lightcoral' | 'lightcyan' | 'lightgoldenrodyellow' | 'lightgray' |
	//	'lightgreen' | 'lightgrey' | 'lightpink' | 'lightsalmon' |
	//	'lightseagreen' | 'lightskyblue' | 'lightslategray' | 'lightslategrey' |
	//	'lightsteelblue' | 'lightyellow' | 'lime' | 'limegreen' |
	//	'linen' | 'magenta' | 'maroon' | 'mediumaquamarine' |
	//	'mediumblue' | 'mediumorchid' | 'mediumpurple' | 'mediumseagreen' |
	//	'mediumslateblue' | 'mediumspringgreen' | 'mediumturquoise' | 'mediumvioletred' |
	//	'midnightblue' | 'mintcream' | 'mistyrose' | 'moccasin' |
	//	'navajowhite' | 'navy' | 'oldlace' | 'olive' |
	//	'olivedrab' | 'orange' | 'orangered' | 'orchid' |
	//	'palegoldenrod' | 'palegreen' | 'paleturquoise' | 'palevioletred' |
	//	'papayawhip' | 'peachpuff' | 'peru' | 'pink' |
	//	'plum' | 'powderblue' | 'purple' | 'red' |
	//	'rosybrown' | 'royalblue' | 'saddlebrown' | 'salmon' |
	//	'sandybrown' | 'seagreen' | 'seashell' | 'sienna' |
	//	'silver' | 'skyblue' | 'slateblue' | 'slategray' |
	//	'slategrey' | 'snow' | 'springgreen' | 'steelblue' |
	//	'tan' | 'teal' | 'thistle' | 'tomato' |
	//	'turquoise' | 'violet' | 'wheat' | 'white' |
	//	'whitesmoke' | 'yellow' | 'yellowgreen' | 'transparent';
	public NamedColorElements getNamedColorAccess() {
		return pNamedColor;
	}
	
	public ParserRule getNamedColorRule() {
		return getNamedColorAccess().getRule();
	}
	
	//RGBColor:
	//	hex=HEX_NUMBER
	//	| 'rgb' '(' r=IntegerValue ',' g=IntegerValue ',' b=IntegerValue ')' | 'rgba' '(' r=IntegerValue ',' g=IntegerValue
	//	',' b=IntegerValue ',' alpha=NumberValue ')';
	public RGBColorElements getRGBColorAccess() {
		return pRGBColor;
	}
	
	public ParserRule getRGBColorRule() {
		return getRGBColorAccess().getRule();
	}
	
	//HSBColor:
	//	'hsb' '(' hue=NumberValue ',' saturation=NumberValue '%' ',' brightness=NumberValue '%' ')' | 'hsba' '('
	//	hue=NumberValue ',' saturation=NumberValue '%' ',' brightness=NumberValue '%' ',' alpha=NumberValue ')';
	public HSBColorElements getHSBColorAccess() {
		return pHSBColor;
	}
	
	public ParserRule getHSBColorRule() {
		return getHSBColorAccess().getRule();
	}
	
	//ColorFunction:
	//	'derive' '(' orig=ColorValue ',' mod=NumberValue '%' ')' | 'ladder' '(' orig=ColorValue ')' 'stops' ('('
	//	stopNumbers+=NumberValue ',' stopColors+=ColorValue ')')+;
	public ColorFunctionElements getColorFunctionAccess() {
		return pColorFunction;
	}
	
	public ParserRule getColorFunctionRule() {
		return getColorFunctionAccess().getRule();
	}
	
	//terminal REAL returns ecore::EDouble:
	//	'-'? '0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//terminal HEX_NUMBER:
	//	'#' ('a'..'f' | 'A'..'F' | '0'..'9')*;
	public TerminalRule getHEX_NUMBERRule() {
		return tHEX_NUMBER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
