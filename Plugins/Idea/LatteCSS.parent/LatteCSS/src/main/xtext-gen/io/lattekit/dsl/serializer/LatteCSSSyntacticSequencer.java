/*
 * generated by Xtext 2.9.0.beta5
 */
package io.lattekit.dsl.serializer;

import com.google.inject.Inject;
import io.lattekit.dsl.services.LatteCSSGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class LatteCSSSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LatteCSSGrammarAccess grammarAccess;
	protected AbstractElementAlias match_LinearGradient___ReflectKeyword_14_1_or_RepeatKeyword_14_0__q;
	protected AbstractElementAlias match_RadialGradient___ReflectKeyword_6_1_or_RepeatKeyword_6_0__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LatteCSSGrammarAccess) access;
		match_LinearGradient___ReflectKeyword_14_1_or_RepeatKeyword_14_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getLinearGradientAccess().getReflectKeyword_14_1()), new TokenAlias(false, false, grammarAccess.getLinearGradientAccess().getRepeatKeyword_14_0()));
		match_RadialGradient___ReflectKeyword_6_1_or_RepeatKeyword_6_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getRadialGradientAccess().getReflectKeyword_6_1()), new TokenAlias(false, false, grammarAccess.getRadialGradientAccess().getRepeatKeyword_6_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_LinearGradient___ReflectKeyword_14_1_or_RepeatKeyword_14_0__q.equals(syntax))
				emit_LinearGradient___ReflectKeyword_14_1_or_RepeatKeyword_14_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_RadialGradient___ReflectKeyword_6_1_or_RepeatKeyword_6_0__q.equals(syntax))
				emit_RadialGradient___ReflectKeyword_6_1_or_RepeatKeyword_6_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('repeat' | 'reflect')?
	 *
	 * This ambiguous syntax occurs at:
	 *     stops+=StopValue ')' (ambiguity) (rule end)
	 */
	protected void emit_LinearGradient___ReflectKeyword_14_1_or_RepeatKeyword_14_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('repeat' | 'reflect')?
	 *
	 * This ambiguous syntax occurs at:
	 *     stops+=StopValue ')' (ambiguity) (rule end)
	 */
	protected void emit_RadialGradient___ReflectKeyword_6_1_or_RepeatKeyword_6_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
