/*
 * generated by Xtext
 */
package io.lattekit.dsl.generator

import com.google.common.base.CaseFormat
import io.lattekit.dsl.latteCSS.BackgroundFilterProperty
import io.lattekit.dsl.latteCSS.BackgroundFilterTypeProperty
import io.lattekit.dsl.latteCSS.BackgroundGravityProperty
import io.lattekit.dsl.latteCSS.BackgroundRepeatProperty
import io.lattekit.dsl.latteCSS.BorderProperty
import io.lattekit.dsl.latteCSS.CSS
import io.lattekit.dsl.latteCSS.ColorProperty
import io.lattekit.dsl.latteCSS.ColorValue
import io.lattekit.dsl.latteCSS.Definition
import io.lattekit.dsl.latteCSS.DrawableProperty
import io.lattekit.dsl.latteCSS.FontFamilyProperty
import io.lattekit.dsl.latteCSS.FontStyleProperty
import io.lattekit.dsl.latteCSS.ShorthandColorProperty
import io.lattekit.dsl.latteCSS.ShorthandSizeProperty
import io.lattekit.dsl.latteCSS.SizeProperty
import io.lattekit.dsl.latteCSS.SizeValue
import io.lattekit.dsl.latteCSS.TransitionProperty
import io.lattekit.dsl.latteCSS.ViewSizeProperty
import java.util.List
import java.util.Map
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import io.lattekit.dsl.latteCSS.BorderRadiusProperty

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LatteCSSGenerator implements IGenerator {


	public static final int COMPLEX_UNIT_PX = 0;
	public static final int COMPLEX_UNIT_DIP = 1;
	public static final int COMPLEX_UNIT_SP = 2;
	public static final int COMPLEX_UNIT_PT = 3;
	public static final int COMPLEX_UNIT_IN = 4;
	public static final int COMPLEX_UNIT_MM = 5;

	val Map<String,Definition> definitions = newHashMap();
	val Map<String,Integer>objecsCount = newHashMap();
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var className = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL,resource.URI.lastSegment.replace(".css",""))
		className += "Stylesheet";
		var packageName = "io.lattekit.stylesheet"
		definitions.clear
		objecsCount.clear
		fsa.generateFile("io/lattekit/stylesheet/"+className+".java", resource.compile(packageName,className))
	}

	def compile(Resource resource,String packageName, String className) '''
		package «packageName»;
		import io.lattekit.ui.NumberValue;
		import io.lattekit.ui.Style;
		import android.graphics.Color;
		import java.util.ArrayList;
		import java.util.List;

		public class «className» extends Stylesheet {
			public «className»() {
				Stylesheet.registerStylesheet("«resource.URI.path»",this);
			}

			@Override
			public void apply(Stylesheet stylesheet) {
				«resource.allContents.filter(typeof(CSS)).map[ compile ].join("\n")»
			}
		}
	'''

	def compile(CSS css) '''
		«FOR definition: css.definitions»
			«FOR sel : definition.selector»
				«FOR simpleSelector : sel.simpleSelector»
					«IF simpleSelector.class_ != null»
						«IF simpleSelector.pseudoClass != null»
							«createStyle(definition, simpleSelector.class_.class_+":"+simpleSelector.pseudoClass.value)»
						«ELSE»
							«createStyle(definition, simpleSelector.class_.class_)»
						«ENDIF»
					«ENDIF»
				«ENDFOR»
			«ENDFOR»
		«ENDFOR»
	'''

	def createStyle(Definition e,String className) {
		var varName = CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL, className.replaceAll(":","-"));
		if (objecsCount.get(className) != null) {
			varName += "_"+objecsCount.get(className)
			objecsCount.put(className,objecsCount.get(className)+1);
		} else {
			objecsCount.put(className,1)
		}
		'''
		  Style «varName» = stylesheet.getClass("«className»");
		  if («varName» == null) {
		  	«varName» = new Style();
		  	stylesheet.registerClass("«className»",«varName»);
		  }

		  «FOR property : e.properties »
		  	«IF property instanceof SizeProperty»
		  		«compileProperty(varName,property)»
		  	«ELSEIF property instanceof ViewSizeProperty»
		  		«compileProperty(varName,property as ViewSizeProperty)»
		  	«ELSEIF property instanceof ColorProperty»
		  		«compileProperty(varName,property as ColorProperty)»
		  	«ELSEIF property instanceof TransitionProperty»
		  		«compileProperty(varName,property as TransitionProperty)»
		  	«ELSEIF property instanceof DrawableProperty»
		  		«compileProperty(varName,property as DrawableProperty)»
		  	«ELSEIF property instanceof BackgroundGravityProperty»
		  		«compileProperty(varName,property as BackgroundGravityProperty)»
		  	«ELSEIF property instanceof BackgroundRepeatProperty»
		  		«compileProperty(varName,property as BackgroundRepeatProperty)»
		  	«ELSEIF property instanceof BackgroundFilterTypeProperty»
		  		«compileProperty(varName,property as BackgroundFilterTypeProperty)»
		  	«ELSEIF property instanceof BackgroundFilterProperty»
		  		«compileProperty(varName,property as BackgroundFilterProperty)»
		  	«ELSEIF property instanceof BorderProperty»
		  		«compileProperty(varName,property as BorderProperty)»
		  	«ELSEIF property instanceof FontFamilyProperty»
		  		«compileProperty(varName,property as FontFamilyProperty)»
		  	«ELSEIF property instanceof FontStyleProperty»
		  		«compileProperty(varName,property as FontStyleProperty)»
		  	«ELSEIF property instanceof ShorthandSizeProperty»
		  		«compileProperty(varName,property as ShorthandSizeProperty)»
		  	«ELSEIF property instanceof ShorthandColorProperty»
		  		«compileProperty(varName,property as ShorthandColorProperty)»
		  	«ELSEIF property instanceof BorderRadiusProperty»
		  		«compileProperty(varName,property as BorderRadiusProperty)»
		  	«ENDIF»
		  «ENDFOR»
		'''
	}

	def unitToInt(String unit) {
		if (unit == null) {
			return COMPLEX_UNIT_PX;
		}
		switch(unit) {
			case "px":
				return COMPLEX_UNIT_PX
			case "dp":
				return COMPLEX_UNIT_DIP
			case "sp":
				return COMPLEX_UNIT_SP
			case "pt":
				return COMPLEX_UNIT_PT
			case "mm":
				return COMPLEX_UNIT_MM
			default:
				return COMPLEX_UNIT_PX
		}
	}

	def compileProperty(String object, ColorProperty colorProperty) '''
		«IF colorProperty.value.rgb != null»
			«IF colorProperty.value.rgb.hex != null»
				«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+colorProperty.property)»(Color.parseColor("«colorProperty.value.rgb.hex»"));
			«ELSEIF colorProperty.value.rgb.alpha != null»
				«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+colorProperty.property)»(Color.argb(«colorProperty.value.rgb.alpha»,«colorProperty.value.rgb.r»,«colorProperty.value.rgb.g»,«colorProperty.value.rgb.b»"));
			«ELSE»
				«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+colorProperty.property)»(Color.rgb(«colorProperty.value.rgb.r»,«colorProperty.value.rgb.g»,«colorProperty.value.rgb.b»"));
			«ENDIF»
		«ENDIF»

	'''

	def compileProperty(String object, FontFamilyProperty prop) '''
		«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+prop.property)»("«prop.value»");
	'''

	def compileProperty(String object, FontStyleProperty prop) '''
		«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+prop.property)»("«prop.value»");
	'''

	def compileProperty(String object, BackgroundGravityProperty prop) '''
		«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+prop.property)»("«prop.values.join(",")»");
	'''

	def compileProperty(String object, BackgroundRepeatProperty prop) '''
		«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+prop.property)»("«prop.values.join(" ")»");
	'''
	def compileProperty(String object, BackgroundFilterTypeProperty prop) '''
		«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+prop.property)»("«prop.value»");
	'''

	def compileProperty(String object, BackgroundFilterProperty prop) {
		var colorValue = if (prop.color == null || prop.color.rgb == null) {
			"null";}
		else if (prop.color.rgb.hex != null) {
			'''Color.parseColor("«prop.color.rgb.hex»")'''
		} else if (prop.color.rgb.alpha != null) {
			'''Color.argb(«prop.color.rgb.alpha»,«prop.color.rgb.r»,«prop.color.rgb.g»,«prop.color.rgb.b»")'''
		}
		'''
            «object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+prop.property)»(«colorValue», «if (prop.filter != null) '"'+prop.filter+'"' else "null"»);
	'''
	}
	def compileProperty(String object, BorderProperty prop) {
		var sizeValue = if ( prop.width != null) '''new NumberValue(«prop.width.value»,«unitToInt(prop.width.dimension)»)''' else "null";
		var colorValue = if (prop.color == null || prop.color.rgb == null) {
			"null";}
		else if (prop.color.rgb.hex != null) {
			'''Color.parseColor("«prop.color.rgb.hex»")'''
		} else if (prop.color.rgb.alpha != null) {
			'''Color.argb(«prop.color.rgb.alpha»,«prop.color.rgb.r»,«prop.color.rgb.g»,«prop.color.rgb.b»")'''
		}
		return '''
			«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+prop.property)»(«sizeValue», "«prop.style»",«colorValue»);
		'''
	}

	def compileProperty(String object, DrawableProperty prop) '''
		«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+prop.property)»("«prop.value»");
	'''
	def compileProperty(String object, TransitionProperty transitionProperty) '''
		List<List<Object>> «object»_transitions = new ArrayList<>();
		«object».setTransitions(«object»_transitions);
		// «var i = 0»
		«FOR transition : transitionProperty.transitions»
			// «i++»
			List<Object> «object»_transitions_«i» = new ArrayList<>();
			«object»_transitions.add(«object»_transitions_«i»);

			«object»_transitions_«i».add("«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,transition.propertyName)»");
			«IF transition.duration != null»
				«IF transition.duration.unit == "s"»
					«object»_transitions_«i».add(«Math.round(Float.parseFloat(transition.duration.time)*1000)»);
				«ELSE»
					«object»_transitions_«i».add(«Math.round(Float.parseFloat(transition.duration.time))»);
				«ENDIF»
			«ELSE»
				«object»_transitions_«i».add(null);
			«ENDIF»

			«IF transition.timingFunction != null»
				«object»_transitions_«i».add("«transition.timingFunction»");
			«ELSE»
				«object»_transitions_«i».add(null);
			«ENDIF»

			«IF transition.delay != null»
				«IF transition.delay.unit == "s"»
					«object»_transitions_«i».add(«Math.round(Float.parseFloat(transition.delay.time)*1000)»);
				«ELSE»
					«object»_transitions_«i».add(«Math.round(Float.parseFloat(transition.delay.time))»);
				«ENDIF»
			«ELSE»
				«object»_transitions_«i».add(null);
			«ENDIF»
		«ENDFOR»
	'''

	def compileSize(List<SizeValue> list, int index) '''«IF list.length > index»new NumberValue(«list.get(index).value»,«unitToInt(list.get(index).dimension)»)«ELSE»null«ENDIF»'''
	def compileColor(List<ColorValue> list, int index) {
		if (list.length <= index || list.get(index).rgb == null) {
			"null";
		} else if (list.get(index).rgb.hex != null) {
			'''Color.parseColor("«list.get(index).rgb.hex»")'''
		} else if (list.get(index).rgb.alpha != null) {
			'''Color.argb(«list.get(index).rgb.alpha»,«list.get(index).rgb.r»,«list.get(index).rgb.g»,«list.get(index).rgb.b»")'''
		}
	}

	def getPropertySetter(String property) '''«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+property)»'''

	def compileProperty(String object, BorderRadiusProperty sizeProperty) '''
		«object».«sizeProperty.property.propertySetter»(«sizeProperty.values.compileSize(0)»,«sizeProperty.values.compileSize(1)»);
	'''


	def compileProperty(String object, ShorthandSizeProperty sizeProperty) '''
		«object».«sizeProperty.property.propertySetter»(«sizeProperty.values.compileSize(0)»,«sizeProperty.values.compileSize(1)»,«sizeProperty.values.compileSize(2)»,«sizeProperty.values.compileSize(3)»);
	'''

	def compileProperty(String object, ShorthandColorProperty sizeProperty) '''
		«object».«sizeProperty.property.propertySetter»(«sizeProperty.values.compileColor(0)»,«sizeProperty.values.compileColor(1)»,«sizeProperty.values.compileColor(2)»,«sizeProperty.values.compileColor(3)»);
	'''


	def compileProperty(String object, SizeProperty sizeProperty) '''
		«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+sizeProperty.property)»(new NumberValue(«sizeProperty.value.value»,«unitToInt(sizeProperty.value.dimension)»));
	'''

	def compileProperty(String object, ViewSizeProperty sizeProperty) '''
		«IF sizeProperty.value.dynamic == "match_parent"»
			«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+sizeProperty.property)»(new NumberValue(io.lattekit.ui.LatteView.MATCH_PARENT,0));
		«ELSEIF sizeProperty.value.dynamic == "wrap_content"»
			«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+sizeProperty.property)»(new NumberValue(io.lattekit.ui.LatteView.WRAP_CONTENT,0));
		«ELSE»
			«object».«CaseFormat.LOWER_HYPHEN.to(CaseFormat.LOWER_CAMEL,"set-"+sizeProperty.property)»(new NumberValue(«sizeProperty.value.value.value»,«unitToInt(sizeProperty.value.value.dimension)»));
		«ENDIF»
	'''

}
