/*
 * generated by Xtext 2.9.0.beta5
 */
package io.lattekit.dsl.formatting2

import com.google.inject.Inject
import io.lattekit.dsl.latteCSS.BackgroundFilterProperty
import io.lattekit.dsl.latteCSS.BorderProperty
import io.lattekit.dsl.latteCSS.BorderRadiusProperty
import io.lattekit.dsl.latteCSS.CSS
import io.lattekit.dsl.latteCSS.CSSProperty
import io.lattekit.dsl.latteCSS.ColorFunction
import io.lattekit.dsl.latteCSS.ColorProperty
import io.lattekit.dsl.latteCSS.ColorValue
import io.lattekit.dsl.latteCSS.Definition
import io.lattekit.dsl.latteCSS.LinearGradient
import io.lattekit.dsl.latteCSS.PaintProperty
import io.lattekit.dsl.latteCSS.RadialGradient
import io.lattekit.dsl.latteCSS.Selector
import io.lattekit.dsl.latteCSS.ShorthandColorProperty
import io.lattekit.dsl.latteCSS.ShorthandSizeProperty
import io.lattekit.dsl.latteCSS.SimpleSelector
import io.lattekit.dsl.latteCSS.SizeProperty
import io.lattekit.dsl.latteCSS.SizeValue
import io.lattekit.dsl.latteCSS.StopValue
import io.lattekit.dsl.latteCSS.TransitionProperty
import io.lattekit.dsl.latteCSS.TransitionValue
import io.lattekit.dsl.latteCSS.ViewSizeProperty
import io.lattekit.dsl.latteCSS.ViewSizeValue
import io.lattekit.dsl.services.LatteCSSGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class LatteCSSFormatter extends AbstractFormatter2 {
	
	@Inject extension LatteCSSGrammarAccess

	def dispatch void format(CSS cSS, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Definition definitions : cSS.getDefinitions()) {
			format(definitions, document);
		}
	}

	def dispatch void format(Definition definition, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Selector selector : definition.getSelector()) {
			format(selector, document);
		}
		for (CSSProperty properties : definition.getProperties()) {
			format(properties, document);
		}
	}

	def dispatch void format(Selector selector, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (SimpleSelector simpleSelector : selector.getSimpleSelector()) {
			format(simpleSelector, document);
		}
	}

	def dispatch void format(SimpleSelector simpleSelector, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(simpleSelector.getId(), document);
		format(simpleSelector.getPseudoClass(), document);
		format(simpleSelector.getClass_(), document);
	}

	def dispatch void format(ViewSizeProperty viewSizeProperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(viewSizeProperty.getValue(), document);
	}

	def dispatch void format(ShorthandSizeProperty shorthandSizeProperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (SizeValue values : shorthandSizeProperty.getValues()) {
			format(values, document);
		}
	}

	def dispatch void format(BorderRadiusProperty borderRadiusProperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (SizeValue values : borderRadiusProperty.getValues()) {
			format(values, document);
		}
	}

	def dispatch void format(SizeProperty sizeProperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(sizeProperty.getValue(), document);
	}

	def dispatch void format(PaintProperty paintProperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(paintProperty.getValue(), document);
	}

	def dispatch void format(TransitionProperty transitionProperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TransitionValue transitions : transitionProperty.getTransitions()) {
			format(transitions, document);
		}
	}

	def dispatch void format(TransitionValue transitionValue, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(transitionValue.getDuration(), document);
		format(transitionValue.getDelay(), document);
	}

	def dispatch void format(BorderProperty borderProperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(borderProperty.getWidth(), document);
		format(borderProperty.getColor(), document);
	}

	def dispatch void format(BackgroundFilterProperty backgroundFilterProperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(backgroundFilterProperty.getColor(), document);
	}

	def dispatch void format(ShorthandColorProperty shorthandColorProperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ColorValue values : shorthandColorProperty.getValues()) {
			format(values, document);
		}
	}

	def dispatch void format(ColorProperty colorProperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(colorProperty.getValue(), document);
	}

	def dispatch void format(ViewSizeValue viewSizeValue, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(viewSizeValue.getValue(), document);
	}

	def dispatch void format(LinearGradient linearGradient, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(linearGradient.getX1(), document);
		format(linearGradient.getY1(), document);
		format(linearGradient.getX2(), document);
		format(linearGradient.getY2(), document);
		for (StopValue stops : linearGradient.getStops()) {
			format(stops, document);
		}
	}

	def dispatch void format(RadialGradient radialGradient, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(radialGradient.getCx(), document);
		format(radialGradient.getCy(), document);
		format(radialGradient.getRadius(), document);
		format(radialGradient.getFx(), document);
		format(radialGradient.getFy(), document);
		for (StopValue stops : radialGradient.getStops()) {
			format(stops, document);
		}
	}

	def dispatch void format(StopValue stopValue, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(stopValue.getPos(), document);
		format(stopValue.getColor(), document);
	}

	def dispatch void format(ColorValue colorValue, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(colorValue.getRgb(), document);
	}

	def dispatch void format(ColorFunction colorFunction, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(colorFunction.getOrig(), document);
		for (ColorValue stopColors : colorFunction.getStopColors()) {
			format(stopColors, document);
		}
	}
}
